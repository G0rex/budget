:css
  #custom_map {
    border: none;
    margin-top: 10px;
    box-shadow: none;
    background: transparent;
    height: 800px;
  }

  #custom_map .leaflet-control-zoom.leaflet-bar.leaflet-control, .leaflet-control-attribution.leaflet-control {
    display: block;
  }

.col-sm-12{:style => 'margin-top: 10px;'}
  = render partial: 'sequence'

.map_container#custom_map.col-sm-12
  = render partial: 'map'

:javascript

  $(document).ready(function() {

    I18n.locale = window.aHelper.lang();

    var zoom = 6, zoom_region = 8;
    var data_areas, data_towns;
    var repairMapOptions = {
      scrollWheelZoom: true,
      zoom: zoom,
      minZoom: 6,
      maxZoom: 13,
      dragging: true,
      map_static: false,
      center: [48.5, 31.2],
      bounds: [ [47.54677, 21.44531], [52.32182, 41.52832]]
    };
    var pointOptions = {
      clustered: false,
      style: {
        opacity: 0.8,
      },
      hoverStyle: {
        opacity: 1,
      },
      featureClickCallback: onFeatureClick,
      getInfoContent: getTownsContent,
      selectPath: false,
      scale: "Ukraine"
    };
    var areasOptions = {
      zIndex: 1,
      featureClickCallback: onFeatureClick,
      getInfoContent: getAreasContent,
      selectPath: false,
      scale: "Ukraine"
    };

    var aRepairMap = RepairMap(repairMapOptions);

    var sequence = aSequence('#sequence');
    sequence.initializeBreadcrumbTrail({clickCallback: sequenceClick});
    sequence.show("Ukraine");



    // add Areas
    $.ajax({
      method: 'get',
      url: '#{community_geo_json_path}&type=areas',
      dataType: 'json',
    })
    .done(function (data) {
      data_areas = data;
      aRepairMap.addGeoJsonSvg(data, areasOptions)
    })
    .fail(function () {
    });

    // add markers
    $.ajax({
      method: 'get',
      url: '#{community_geo_json_path}',
      dataType: 'json',
    })
    .done(function (data) {
      data_towns = data;
      aRepairMap.addGeoJsonPoints(data, pointOptions)
    })
    .fail(function () {
    });

    function onFeatureClick(feature) {
      $.ajax({
        method: 'get',
        url: '#{community_geo_json_path}&area_title=' + feature.properties.title,
        dataType: 'json',
      })
      .done(function (data) {
        if(data['features'].length > 0) {
          sequence.show(feature.properties.title);
          $("#custom_map").html('');
          $("#custom_map").html('#{ j render :partial => 'map'}');
          repairMapOptions.center = [49, 39];
          repairMapOptions.zoom = zoom_region;
          aRepairMap = RepairMap(repairMapOptions);
          areasOptions.featureClickCallback = onCommunityClick;
          areasOptions.getInfoContent = getCommunityContent;
          areasOptions.scale = "community";
          aRepairMap.addGeoJsonSvg(data, areasOptions);
        }
      })
      .fail(function (e) {
        console.log(e)
      });
    }

    function onCommunityClick(feature) {
      console.log(feature.properties.title);
    }

    function getAreasContent(properties) {
      var content = "", title = "";
      if(properties != "Ukraine") {
        content += '<h3>' + properties.title + '</h3>' +
                   '<p>Територіальних громад: ' + properties.communities_count + '</p>';
      }
      return content;
    }

    function getTownsContent(properties) {
      var content = "", title = "";
      if(properties != "Ukraine") {
        content += '<h3>' + properties.title + '</h3>';
      }
      return content;
    }

    function getCommunityContent(properties) {
      var content = "", title = "";
      if(properties != "Ukraine") {
        content += '<h3>' + properties.title + '</h3>';
        if(properties.participants) {
          content += '<p><b>Склад громади: </b></p><ul>';
          $.each(properties.participants.split(','), function(p, i){
            content += '<li>' + i + '</li>';
          })
          content += '</ul>';
        }
      }
      return content;
    }

    function sequenceClick(){
      $("#custom_map").html('#{ j render :partial => 'map'}');
      sequence.show("Ukraine");
      repairMapOptions.center = [48.5, 31.2];
      repairMapOptions.zoom = zoom;
      aRepairMap = RepairMap(repairMapOptions);
      // add Areas
      areasOptions.featureClickCallback = onFeatureClick;
      areasOptions.getInfoContent = getAreasContent;
      areasOptions.scale = "Ukraine";
      aRepairMap.addGeoJsonSvg(data_areas, areasOptions);
      // add markers
      aRepairMap.addGeoJsonPoints(data_towns, pointOptions);
    }
  });
