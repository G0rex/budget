#sequence

:javascript

  function aSequence(aContainer) {
    var b = {
          w: 200, h: 45, s: 3, t: 10
        };
    var self, path;

    return {
      // Given a node in a partition layout, return an array of all of its ancestor
      // nodes, highest first, but excluding the root.
      container: aContainer,

      show: function(node) {
        this.hideBreadcrumb();
        var nodeArray = ["Ukraine"];
        if(node != "Ukraine") {
          nodeArray.push(node);
        }
        this.updateBreadcrumbs(nodeArray);
      },

      initializeBreadcrumbTrail: function(options) {
        self = this;
        self.clickCallback = options.clickCallback;
        // Add the svg area.
        if($("#trail").length <= 0 ) {         // prevent adding new trails when window resize
          var trail = d3.select(aContainer).append("svg:svg")
              .attr("width", '100%')
              .attr("height", 50)
              .attr("id", "trail");
        }
      },

      // Generate a string that describes the points of a breadcrumb polygon.
      breadcrumbPoints: function(d, i) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.
        points = []
        points.push("0,0");
        points.push(b.w + ",0");
        points.push(b.w + b.t + "," + (b.h / 2));
        points.push(b.w + "," + b.h);
        points.push("0," + b.h);
        if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.
          points.push(b.t + "," + (b.h / 2));
        }
        //this.points = points
        return points.join(" ");
      },

      breadcrumbLevelPoints: function(d, i) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        points = []
        points.push(b.w - 20 + ",0");
        points.push(b.w + ",0");
        points.push(b.w + b.t + "," + (b.h / 2));
        points.push(b.w + "," + b.h);
        points.push(b.w - 20 + "," + b.h);
        //this.points = points
        return points.join(" ");
      },

      // Update the breadcrumb trail to show the current sequence and percentage.
      updateBreadcrumbs: function(nodeArray) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        // Data join; key function combines name and depth (= position in sequence).
        $(".sequence_hide").slideDown();       // if sequence block not empty it will be shown

        var g = d3.select(aContainer + " #trail")
            .selectAll("g")
            .data(nodeArray);

        // Add breadcrumb and label for entering nodes.
        var entering = g.enter().append("svg:g")
                                .attr('transform', "translate(0,0)")
                                .attr("cursor", "pointer")
                                .attr("id", function(d){ return "drag" + (d.depth || d.level) })
                                .on('click', function(d) {
                                  if (dragged == 1) return;
                                  self.clickCallback(d);
                                  d3.event.stopPropagation();
                                });

        if(draggable == 1) {
          entering.call(drag);
        }

        entering.append("svg:polygon")
            .attr("points", this.breadcrumbPoints)
            .style("fill", "blue")
            .style("stroke", "white")

        entering.append("svg:polygon")
            .attr("points", this.breadcrumbLevelPoints)
            .style("fill", "blue")
            .style("stroke", "white")

        entering.append("svg:text")
            .attr("x", 0)
            .attr("y", 10)
            .attr("dy", "0.35em")
            .attr("text-anchor", "cent")
            .text(function(d) { return d.label; })
            .call(aVisify.helpers.wrap, b.w - 40)

        entering.append("svg:text")
            .attr("x", b.w - 8)
            .attr("y", 23)
            .attr("dy", "0.35em")
            .attr("text-anchor", "middle")
            .style("font-size", "1.2em")
            .style("font-weight", "bold")
            .text(function(d) {
              if(init_levels.indexOf(d.taxonomy) == -1) {
                return d.parent ? init_levels.indexOf(d.parent.taxonomy) + 1 : 0;
              }
              return init_levels.indexOf(d.taxonomy) + 1;
            })

        // Set position for entering and updating nodes.
        g.attr("transform", function(d, i) {
          return "translate(" + i * (b.w + b.s) + ", 0)";
        });

        // Remove exiting nodes.
        g.exit().remove();

        // Now move and update the percentage at the end.
        d3.select(aContainer + " #trail").select("#endlabel")
            .attr("x", (nodeArray.length + 0.5) * (b.w + b.s))
            .attr("y", b.h / 2)
            .attr("dy", "0.35em")
            .attr("text-anchor", "middle")
            .text(percentageString);

        // Make the breadcrumb trail visible, if it's hidden.
        $(aContainer + " #trail g").attr("style", "visibility: ;");
      },

      // Hide the breadcrumb trail
      hideBreadcrumb: function() {
        g = $(aContainer + " #trail g");
        g.not(':first').attr("style", "visibility: hidden;");
      }
    }
  }