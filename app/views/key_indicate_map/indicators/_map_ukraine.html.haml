:css
  #custom_map {
    height: 600px;
    border: 1px solid #777;
    border-radius: 10px;
    margin-top: 20px;
    box-shadow: 0 0 10px rgba(0,0,0,0.5);
    background: #ddd;
  }

  #custom_map svg {
    position: relative;
  }

  #custom_map path {
    fill: orange;
    fill-opacity: .5;
    stroke: #fff;
    stroke-width: 1.5px;
  }

  #custom_map path:hover {
    fill-opacity: 1.0;
  }

  #custom_map .leaflet-container {
    background: transparent;
    cursor: default;
  }

  #custom_map .leaflet-control-zoom.leaflet-bar.leaflet-control, .leaflet-control-attribution.leaflet-control {
    display: none;
  }

  .info .title {
    font-size: 1.3em;
    font-weight: bold;
    margin-top: 10px;
  }

  .info h4 {
    margin: 0 0 10px 0;
  }

  #spinner {
    display: none;
  }

  .spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    margin-left: -50px; /* half width of the spinner gif */
    margin-top: -50px; /* half height of the spinner gif */
    text-align:center;
    z-index:1234;
    overflow: auto;
    width: 100px; /* width of the spinner gif */
    height: 102px; /*hight of the spinner gif +2px to fix IE8 issue */
  }

#custom_map.map_container
  = render partial: 'map'
  #spinner.spinner
    %img#img-spinner{:src => '/assets/loading.gif', :alt => 'Loading'}

:javascript

  $(document).ready(function() {

    I18n.locale = window.aHelper.lang();

    $("#spinner").show();

    var aRepairMap = RepairMap({ scrollWheelZoom: false, zoom: 6, minZoom: 6, maxZoom: 9, dragging: false,
      center: [48.5, 31.2],
      bounds: [ [47.54677, 21.44531], [52.32182, 41.52832]],
      getInfoContent: getInfoContent
    });

    var key, key_name, year, current_btn, maxValue;

    // trigger map click on collapse button click
    $('.collapse_btn').click(function(){
      var collapse_btn = $('.tab-pane.active .collapse_btn');
      collapse_btn.removeClass('active').addClass('non-active');
      $('.tab-pane.active .collapse_descr.in').removeClass('in');
      current_btn = $(this);
      current_btn.removeClass('non-active').addClass('active');
      key = current_btn.data('id');
      $('#key_description .content').html(current_btn.data('description'));
      aRepairMap.resetData(key, year);
    });

    // find active button with key in shown collapse panel
    $('#indicators_list a[data-toggle="tab"]').click(function(){
      current_btn = $($($(this).attr('href')).find('.collapse_btn.active')[0]);
      key = current_btn.data('id');
      $('#key_description .content').html(current_btn.data('description'));
      aRepairMap.resetData(key, year);
    });

    // if year changed
    $('#year_change').on("change", function(){
      year = $('#year_change select option:selected').val();
      aRepairMap.resetData(key, year);
    })

    // add Areas
    $.ajax({
      method: 'get',
      url: '/key_indicate_map/indicators/geo_json/areas',
      dataType: 'json'
    })
    .done(function (data) {
      $("#spinner").hide();
      current_btn = $('.tab-pane.in.active .collapse_btn.active');
      year = $('#year_change select option:selected').val();
      key = current_btn.data('id');
      $('#key_description .content').html(current_btn.data('description'));
      aRepairMap.addGeoJsonSvg(data, key, year, {
        zIndex: 1,
        featureClickCallback: onFeatureClick,
        getInfoContent: getInfoContent
      })
    })
    .fail(function () {
    });

    // add markers
    $.ajax({
      method: 'get',
      url: '/key_indicate_map/indicators/geo_json/towns',
      dataType: 'json'
    })
    .done(function (data) {
      aRepairMap.addGeoJsonPoints(data, getPoint, {
        clustered: true,
        style: {
          opacity: 0.8
        },
        hoverStyle: {
          opacity: 1
        },
        featureClickCallback: onFeatureClick,
        getInfoContent: getInfoContent
      })
    })
    .fail(function () {
    });

    var CityIcon = L.Icon.extend({ options: { iconSize: [32, 32] }});
    var TownIcon = L.Icon.extend({ options: { iconSize: [32, 32] }});

    var icons = {};
    icons.city = new CityIcon({iconUrl: '/assets/map/city-hall.png'})
    icons.town = new TownIcon({iconUrl: '/assets/map/iconTown.png'})

    function getPoint(properties) {
      var point = {};
      switch (properties.level) {
        case 'city':
          point.icon = icons.city;
          break;
        case 'town':
          point.icon = icons.town;
          break;
        default:
          point.icon = new L.Icon.Default();
          break
      }

      return point
    }

    function onFeatureClick(feature) {
      removeRow = function(el) {
          d3.select('path[data-id="' + $(el).parents("tr").attr('id').split('tr_')[1] + '"]').style('stroke','rgb(255, 255, 255)').style('stroke-width','1.5px');
          $(el).parents("tr").remove();
      }
      if($('#tr_' + feature.properties.id).length > 0) {
        $('#tr_' + feature.properties.id).remove();
      } else {
        var content =
          '<tr id="tr_' + feature.properties.id + '">' +
          '<td><button class="btn btn-xs btn-default" onclick="removeRow(this)" style="border:none;">x</button></td>' +
          '<td><a href="' + "#{public_path('ID')}".replace('ID', feature.properties.id) + '">' + feature.properties.title + '</a></td>';
        if(feature.properties['indicators'][year] && feature.properties['indicators'][year][key]) {
          var value = feature.properties['indicators'][year][key]['value'];
          content += '<td class="key_value">';
          content += addPercentOfMax(value);
          content += " " + value + '</td>';
        } else {
          content += '<td class="key_value"></td>';
        }
        content += '</tr>';
        $('#key_comparison table').append(content);
      }
    }

    function getInfoContent(properties) {
      var content = "";
      if(properties == "Ukraine") {
        content = generate_content();
      } else {
        var value = 0, num_value = 0;
        if(properties['indicators'][year] && properties['indicators'][year][key]) {
          value = properties['indicators'][year][key]['value'];
          num_value = value;
          if(properties['indicators'][year][key]['unit']) {
            value += " " + properties['indicators'][year][key]['unit']
          }
        }
        content =
        '<div class="title">' + key_name + '</div>' +
        '<h4>' + properties.title + '</h4>' +
        '<span style="font-size: 1.1em;">' + value + '</span></br>';
        content += addPercentOfMax(num_value);
      }
      return content;
    }

    function generate_content() {
        key_name = current_btn.data('name');
        var content =
            '<div class="title">' + key_name + '</div>' +
            '<h4>' + I18n.t('ukraine') + '</h4>' +
            '<span style="font-size: 1.1em;">' + current_btn.data('value') + " " + current_btn.data('unit') + '</span></br>';
        if(current_btn.data('value') <= aRepairMap.getMaxValue()){
          maxValue = aRepairMap.getMaxValue();
        } else {
          maxValue = current_btn.data('value');
        }
        content += addPercentOfMax(current_btn.data('value'));
        return content;
    }

    function addPercentOfMax(value){
      content = "";
      if(value <= maxValue){
        var stop;
        if(value < 0) {
          if(maxValue < 0) {
            stop = 10 - Math.round((value*10)/(maxValue + value));
          } else {
            stop = 10 - Math.round(-(value*10)/(maxValue - value));
          }
        } else {
          stop = Math.round((value*10)/maxValue);
        }
        for(var i = 0; i < stop; i++) {
          content += '<i class="fa fa-square fa-lg" style="color: #82a2cf;"></i>';
        }
        for(var i = 0; i < 10-stop; i++) {
          content += '<i class="fa fa-square fa-lg" style="color: lightgray;"></i>';
        }
      }
      return content;
    }
  });
