:scss
  svg.legend {
    .item {
      fill: black;
      font-size: 12px;
      text-anchor: start;
    }
  }

  .chart {
    g{
      text{
        fill: white;
        font-size: 14px;
      }
      .plan {
        text-anchor: end;
      }
      .fact{
        text-anchor: start;
      }
      .fact,.plan{
        opacity: 0;
        transition: opacity 0.3s linear;
      }
      &:hover,&:focus{
        .fact,.plan{
          opacity: 1;
          transition: opacity 0.3s linear;
        }
      }
    }


    .label {
      fill: black;
      font-size: 18px;
      text-anchor: start;
    }
    .label[data-selectable=selectable] {
      fill: darkslateblue;
      cursor: pointer;

      &:hover {
        fill: #87cefa;
      }

    }
  }

%svg.col-xs-7.chart
%svg.col-xs-5.legend

:javascript

  aCompareTaxonomiesChart = {
    chart: d3.select(".chart").attr("height", 0),
    legend: d3.select(".legend").attr("height", 0)
  }

  aCompareTaxonomiesChart.clear_chart = function (){
    this.chart.attr("height", 0).selectAll("g").remove()
    this.legend.attr("height", 0).selectAll("g").remove()
  }

  aCompareTaxonomiesChart.draw_chart = function (data){
    this.clear_chart()
    var chart = this.chart
    var doc_width = $('.chart').width()
    var chartWidth            = doc_width * .6,
        barHeight             = 30,
        groupHeight           = barHeight * data.series.length,
        gapBetweenGroups      = 60,
        spaceForLabels        = 0,
        spaceForLegend        = doc_width - chartWidth,
        blazon_width          = 35,
        blazon_heigth         = 35,
        blazon_circle_radius  = (blazon_heigth / 2) + 5,
        chart_start_x         = blazon_circle_radius / 2;
    // Zip the series data together (first values, second values, etc.)
    var zippedData = [];
    for (var i=0; i<data.labels.length; i++) {
      for (var j=0; j<data.series.length; j++) {
        zippedData.push(data.series[j].values[i]);
      }
    }
    // Color scale
    //var color = d3.scale.category10();
    var chartHeight = 50 + ((blazon_circle_radius*2) +10) * zippedData.length + gapBetweenGroups * data.labels.length;

    var x = d3.scale.log()
      .domain([1, d3.max(zippedData,function(d){ return d.plan || d.fact})])
      .range([1, chartWidth])

    var y = d3.scale.linear()
        .range([chartHeight + gapBetweenGroups, 0]);

    chart.attr("width", spaceForLabels + chartWidth + spaceForLegend)
      .attr("height", chartHeight)

    // Create bars
    var bar = chart.selectAll("g")
        .data(zippedData)
        .enter()
        .append("g")
        .attr("transform", function(d, i) {
          var y_translate = (50 + i * ((blazon_circle_radius*2) +10) + gapBetweenGroups * (0.5 + Math.floor(i/data.series.length)));
          return "translate(" + 0 + "," + y_translate + ")";
        });


    bar = chart.selectAll("g")
      .data(zippedData)
    //////////////////////////////////////////////////////////////////////////////////////
    // Draw plan & fact rectangles
    // Create plan rectangles of the correct width

    bar.append("rect")
        .attr('x',chart_start_x)
        .attr('data-type','plan')
        .attr("fill", function(d,i) { return aCompareTaxonomies.color[(i % data.series.length)].plan })
        .attr("class", "bar")
        .attr("width", function(d){ return x(d.plan) || '0' } )
        .attr("height", function(d) { return d == 0 ? 0 : barHeight - 1; });

    // Create fact rectangles of the correct width
    bar.append("rect")
        .attr('x',chart_start_x)
        .attr('data-type','fact')
        .attr("fill", function(d,i) { return aCompareTaxonomies.color[(i % data.series.length)].fact })
        .attr("class", "bar")
        .attr("width", function(d) {
          var fact_x = d3.scale.linear()
          .domain([1, d.plan])
          .range([1, x(d.plan)]);
          return fact_x(d.fact) || '0' })
        .attr("height", function(d) { return d == 0 ? 0 : barHeight - 1; });
    //////////////////////////////////////////////////////////////////////////////////////
    //draw town blazon
    bar.append('circle')
      .style("stroke", "gray")
      .style("fill", "white")
      .attr("r", blazon_circle_radius)
      .attr("cx", chart_start_x)
      .attr("cy", function(d){ return ((blazon_heigth - blazon_circle_radius) + 2 )});

    bar.append("svg:image")
      .attr("xlink:href",function(d,i){return aCompareTaxonomies.towns_blazon[(i % data.series.length)].img } )
      .attr("width", blazon_width)
      .attr("height", blazon_heigth)
      .attr("x", function(d){ return  -((blazon_width / 2) - chart_start_x) })
      .attr("y", function(d){ return (barHeight - blazon_heigth) / 2 });

    //////////////////////////////////////////////////////////////////////////////////////


    // Draw plan fact text
    // Add plan text label in bar
    bar.append("text")
        .attr("class", "plan")
        .attr("x", function(d) { return x(d.plan) - 5 || '0' })
        .attr("y", barHeight / 2)
        .attr("dy", ".35em")
        .text(function(d) { return d == 0 ? "" : aHelper.short_label(d.plan); });

    // Add fact text label in bar
    bar.append("text")
        .attr("class", "fact")
        .attr('x',chart_start_x + blazon_circle_radius + 5)
        .attr("y", barHeight / 2)
        .attr("dy", ".35em")
        .text(function(d) { return d == 0 ? "" : aHelper.short_label(d.fact); });
    //////////////////////////////////////////////////////////////////////////////////////
    // Draw labels
    bar.append("text")
        .attr("class", "label")
        .attr("data-selectable", function(d) { return aCompareTaxonomiesPath.last_level ? "" : "selectable"; })
        .attr("y", -20)
        .attr("dy", ".35em")
        .text(function(d,i) {
          if (i % data.series.length === 0)
            return data.labels[Math.floor(i/data.series.length)].label;
          else
            return ""})
        .on("click", function(d, i){
          item = data.labels[Math.floor(i/data.series.length)]

          if (aCompareTaxonomiesPath.last_level == false) {
            aCompareTaxonomiesPath.path.push(item)
            aCompareTaxonomies.create_chart()
          }
        })

    // Draw legend
    var legend = this.legend
    legend.attr("height", chartHeight)

    var legendYPos  = 90;

    var legend_x_scale = d3.scale.linear()
                                    .domain([0,2])
                                    .range([0,spaceForLegend]);

    var items = legend.selectAll('g')
        .data(zippedData)
        .enter()
        .append('g')
        .attr('transform', function (d, i) {
            var vert = (i * ((blazon_circle_radius*2) +10) + gapBetweenGroups * (0.5 + Math.floor(i/data.series.length)) + (- 20));

            return "translate(" + 0 + "," + vert + ")";
        });

    var colors=d3.scale.linear()
        .domain([0,100]);

    colors.range(["green","yellow","red"].reverse());


    items.append('text')
        .attr('class', 'plan')
        .attr('x', function(d,i){ return legend_x_scale(0) })
        .attr('y', legendYPos)
        .text(function (d,i) {
          return d == 0 ? "" : aHelper.short_label(d.plan);
        });
    items.append('text')
        .attr('class', 'fact')
        .attr('x', function(d,i){ return legend_x_scale(1) })
        .attr('y', legendYPos)
        .text(function (d,i) {
          return d == 0 ? "" : aHelper.short_label(d.fact);
        });
    items.append('rect')
        .attr('class','percent_rect')
        .attr('x', function(d,i){ return legend_x_scale(2) - 3 })
        .attr('y', legendYPos - 16 )
        //set color
        .attr("fill", function(d,i) { return colors(Math.round(d.fact * 100 / d.plan)) })
        .attr('opacity', '.7')
        // set border-radius
        .attr('rx',2)
        .attr('ry',2)
        .attr('width','36')
        // .attr("width", function(d) { return  (12 * Math.round(d.fact * 100 / d.plan).toString().length) + 12 ; })
        .attr("height", '22');

    items.append('text')
        .attr('class', 'fact')
        .attr('x', function(d,i){ return legend_x_scale(2) })
        .attr('y', legendYPos)
        .text(function (d,i) {
          return Math.round(d.fact * 100 / d.plan) + '%';
        });
  };
