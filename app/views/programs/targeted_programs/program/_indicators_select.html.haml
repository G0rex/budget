:scss
  //init colors
  $dark-blue: #0c2231;
  $white: #ffffff;
  $no-color: transparent;
  $gray: #999;

  #select2-drop {
    .select2-search {
      display: none;
    }
  }

  .select2-container {
      width: 100%;
      .select2-choice {
        height: 34px;
        border-radius: 0;
        border-color: $dark-blue;
        background-color: $no-color;
        background-image: none;
        abbr{
          right: 32px;
        }
        .select2-chosen {
          text-align: right;
          margin: 3px 46px 3px auto;
          font-size: 16px;
          color: $gray;
          //text-transform: lowercase;
          float: right;
          padding-top: 0 !important;
        }
        .select2-arrow{
          border-left: 0;
          border-radius: 0;
          background: $dark-blue;
          width: 32px;
          &:before {
            content: '\f04b';
            transform: rotate(90deg);
            font-family: FontAwesome;
            position: absolute;
            right: 0;
            cursor: pointer;
            font-size: 20px;
            width: 32px;
            height: 32px;
            background: $dark-blue;
            color: $white;
            padding: 3px 0 2px 9px;
          }
        }
        &:hover,
        &:focus {
          outline-color: inherit;
        }
      }
  }
  .select2-drop-multi {
    border-color: $dark-blue;
    margin-left: 1px;
    .select2-results {
      padding: 0;
      margin: 4px 0;
    }
  }
  .select2-drop-active {
    border: 1px solid $dark-blue;
    border-top: 0;
    border-radius: 0;
  }
-#= select_tag "#{category}", options_from_collection_for_select(data, 'id', 'title'), include_blank: true
= select_tag "#{category}",
              options_for_select(data.collect { |d| [ d[:title],
                                                      d[:id],
                                                      { 'data-value' => d[:value],
                                                        'data-measurement' => d[:measurement_unit] } ] }),
              include_blank: true

:javascript

  $("##{category}").select2({
    placeholder: "#{t(".#{category}")}" + " |"
  }).on("select2-open", function() {
    checkActiveTabs($(this));
  }).on('change', function(data) {
    selectedIndex = $(this).prop('selectedIndex');
    //TODO: Make it easy - refactor to func
    $(".indicators .tab-pane").each(function() {
      if ($(this).hasClass('active')) {
        $(this).removeClass('active');
      }
      $("##{category}-" + (selectedIndex-1)).addClass('active');
    });

    getValuesFromSelect(data);



  });

  //// FUNCTION'S ////
  // get object, default: $(this)
  // WARN! Use $(this) to find DOM element <li>
  // check for existing class 'active' into <li>'s
  // return <li> with active class
  function checkActiveTabs(obj) {
    // check for active class into tabs
    $(".tabs-wrapper li").each(function() {
      if ($(this).hasClass('active')) {
        $(this).removeClass('active');
      }
    });
    // add class 'active' to select2 into changed tabs
    obj.closest("li").addClass('active');
  }
  // get data, default: data from select tag
  // WARN! Get data that you pass to select tag
  // return value(number), measurement(string)
  function getValuesFromSelect(selectData) {
    value = $(selectData.added.element).data('value');
    measurement = $(selectData.added.element).data('measurement');
    // console.log('value:', value);
    // console.log('measurement:', measurement);
  }
