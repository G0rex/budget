- model_class = Repairing::Layer

:css
  .map_container {
    height: 750px;
  }

= content_for :header do
  .head
    %i.fa.fa-map
    = @repairing_layer.town.title if @repairing_layer.town
    = ", " + @repairing_layer.title unless @repairing_layer.title.blank?

.col-xs-12
  = render 'edit_form'

.col-xs-12.col-md-6
  .panel.panel-default
    .panel-heading
      = render partial: 'search', :locals => {layer: @repairing_layer }
    .panel-body
      .map_container.col-xs-12
        = render partial: 'repairing/maps/map'

.col-xs-12.col-md-6
  .panel.panel-default
    .panel-heading
      = t('repairing.layers.edit.repair')
    .panel-body
      #repair
      #remove_repair

.clear

= link_to t('form.show'), @repairing_layer, :class => 'btn btn-primary'
= link_to t('form.back'), repairing_layers_path, :class => 'btn btn-default'

:javascript

  $(document).ready(function() {

    var aRepairMap = RepairMap({
      zoom: 6,
      minZoom: 5,
      maxZoom: 18,
      center: [48.5, 31.2],
      bounds: [ [47.54677, 21.44531], [52.32182, 41.52832]],
      getMapPopupContent: getMapPopupContent,
      scrollWheelZoom: true
    });
    var categories_icons = #{Repairing::Category.get_category_icons}
    // add markers
    $.ajax({
      method: 'get',
      url: '#{geo_json_repairing_layer_path}',
      dataType: 'json',
    })
    .done(function (data) {
      //$.each(data['features'], function(i, d){
        aRepairMap.addGeoJsonPoints(data['features'], getPoint, {
          clustered: true,
          style: {
            opacity: 0.8,
          },
          hoverStyle: {
            opacity: 1,
          },
          featureClickCallback: onFeatureClick,
          dragCallback: onDrag,
          editInfoContent: true
        })
      //})
    })
    .fail(function () {
    });

    var Icon = L.Icon.extend({ options: { iconSize: [28, 28] }});
    // REPEAT !!!!!!!!!!!!
    // Same code in repairing/maps/_iframe.html.haml
    function getIconByCategory(category_id){

      var iconCategoryUrl = '/assets/repairing/default_icon.png';
      if (categories_icons[category_id] ){
        iconCategoryUrl = categories_icons[category_id];
      };

      return new Icon({iconUrl: iconCategoryUrl});
    };

    function getPoint(properties) {
      var point = {}
      point.icon = getIconByCategory(properties.p_c_id);
      //if(properties.img) {
      //  point.icon = new Icon({iconUrl: properties.img});
      //} else {
        //point.icon = new L.Icon.Default();
      //  point.icon = new Icon({iconUrl: '/assets/repairing/default_icon.png'});
      //}
      point.draggable = false;
      return point;
    }

    function onMapClick(feature, popup) {
    }

    function getMapPopupContent(e) {
      var content = e.latlng.toString()
      return content
    }

    function getInfoContent(properties) {
      var content =
            '<div class="popup">' +
              '<h3>' + properties.title + '</h3>' +
              '<p>' + properties.address + '</p>' +
              '<p>' + properties.amount + '</p>' +
            '</div>'

      return content
    }

    var _removedFeature
    var _selectedFeature

    function onFeatureClick(feature, target) {
      selectFeature(feature, target)
    }

    function onDrag(layer, ll) {
      $.ajax({
        method: 'PUT',
        url: '#{repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", layer.feature.properties.id),
        dataType: 'json',
        cache: false,
        data: {
          repairing_repair: {
            coordinates: [ll.lat, ll.lng]
          }
        }
      })
      .fail(function () {
        alert('Не вдалось зберегти дані')
      })
    }

    $('.search_map form').bind("ajax:success", function(f, data){
      if (data.features) {
        selectFeature(data.features[0]);
      } else {
        aRepairMap.addGeoJsonPoints([data['properties']['id'], 0, data], getPoint, {
          clustered: true,
          style: {
            opacity: 0.8,
          },
          hoverStyle: {
            opacity: 1,
          },
          featureClickCallback: onFeatureClick,
          dragCallback: onDrag,
          editInfoContent: true
        });
        selectFeature(data);
      }
    });

    function selectFeature(feature, target) {
      $('#repair').html('');

      if (_removedFeature) {
        url = '#{repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", _removedFeature.properties.id)
        _removedFeature = undefined

        $.ajax({
          method: 'GET',
          cache: false,
          url: url,
        }).done(function (data) {
          aRepairMap.addGeoJson(data);
        })
      }

      _selectedFeature = feature

      if (_selectedFeature) {
        $.ajax({
          method: 'GET',
          cache: false,
          url: '#{edit_repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", _selectedFeature.properties.id),
          success: function(){
            $('#remove_repair').on('click',function(){
                aRepairMap.removeMarker(_selectedFeature);
            });
          }
        })
        .fail(function () {
          console.log('click fail')
        })

        if (_selectedFeature.properties.repair == "road") {
          if (target) {
            _removedFeature = target.feature
            aRepairMap.map.removeLayer(target)
          }

          editRoute()
        } else {
          aRepairMap.editRoute([])
        }
      }

      function editRoute() {
        var coordinates = _selectedFeature.properties.route;

        var waypoints = []
        waypoints.push({ latLng: L.latLng(coordinates[0]) });
        waypoints.push({ latLng: L.latLng(coordinates[coordinates.length - 1]) });

        aRepairMap.editRoute(waypoints, routeFoundCallback)

        function routeFoundCallback(route){
          var coordinates = ''
          $.each(route, function(key,val) {
            coordinates += val + ' '
          })

          $.ajax({
            method: 'PUT',
            url: '#{repairing_layer_repair_path(@repairing_layer.id, "%id%")}'.replace("%id%", _selectedFeature.properties.id),
            dataType: 'json',
            data: {
              repairing_repair: {
                coordinates: coordinates
              }
            }
          })
          .fail(function () {
            alert('Не вдалось зберегти дані')
          })
        }
      }
    }


  });
