:css
  #description {
    height: 100px;
  }

= content_for :header do
  .head
    %i.fa.fa-money
    #{t('.title')}:
    %span.descr
      #{@taxonomy.title}


.visify.row.budget
  .col-xs-12
    = render partial: 'widgets/visify/sequence', :locals => { budget_file_id: @taxonomy.id }

  .icons.col-xs-12.col-md-5
    = render partial: 'left_icons', :locals => { budget_file_id: @taxonomy.id }

    .slider
      = render partial: 'widgets/visify/slider_chart'
      = render partial: 'widgets/visify/slider_compare', :locals => { budget_file_id: @taxonomy.id}

  .col-xs-12.col-md-7
    #under_sequence
    = render partial: 'sidebar', :locals => { budget_file_id: @taxonomy.id }

  #description.col-xs-12

  = render partial: 'widgets/visify/helpers'

:javascript

  $(document).ready(function() {
    var sequence = aSequence('.visify')
    var chart = aTreeChart('.bubbletree');
    var slider = aSliderCompare('#slider_compare');
    var slider_chart = aSliderChart('#slider_chart', slider);
    var sidebar = aSidebar('.visify');
    var icons = aIcons();


    var year = "#{@sel_year}",
        month = "#{@sel_month}";
    var _data = null, current_data = null, center_node = null, current_key;

    sequence.initializeBreadcrumbTrail({clickCallback: sequenceItemClick});
    slider.initialize(100, {clickCallback: monthItemClick});
    slider_chart.initialize(250, {clickCallback: yearItemClick});
    sidebar.initialize(600, {clickCallback: sequenceItemClick});
    chart.initialize({ width: $(document).width()/2, height: 600, clickCallback: bubbleItemClick });

    d3.json("/widgets/visify/get_visify_level/" + "#{@taxonomy.id}" + "/kvk/", function(data) {
      icons.initialize(data, { height: 500, clickCallback: iconsItemClick });
      icons.show(year, month);
    });

    function iconsItemClick(key) {
      d3.json("/widgets/visify/get_bubblesubtree/" + "#{@taxonomy.id}" + "/kvk/" + key, function(data) {
        current_data = buildData(data);
        _data = data; current_key = key;
        chart.set_centerNode(null);

        sequence.show(current_data);
        chart.show(current_data);
        slider_chart.show(current_data, year);
        slider.show(current_data, year, month);
        sidebar.show(current_data);
      });
    }

    function bubbleItemClick(node) {
      sequence.show(node);
      slider_chart.show(node, year);
      slider.show(node, year, month);
      sidebar.show(node);
      chart.set_centerNode(node);
    }

    function yearItemClick(new_year) {
      if(slider_chart.current_month != 0 && year == new_year) {
        month = 0;
      }
      year = new_year;
      current_data = buildData(_data);
      icons.show(year, month);
      sequence.show(current_data);
      chart.show(current_data);
      slider.show(current_data, year, month);
      sidebar.show(current_data);
      $("#" + current_key).attr("style","background-color: #C6E8FA");
    }

    function monthItemClick(new_month) {
      if(month == new_month) {
        month = 0;
      } else {
        month = new_month;
      }
      current_data = buildData(_data);
      icons.show(year, month);
      sequence.show(current_data);
      chart.show(current_data);
      sidebar.show(current_data);
      slider_chart.set_month(month);
      $("#" + current_key).attr("style","background-color: #C6E8FA");
    }

    function sequenceItemClick(node) {
      sequence.show(node);
      slider_chart.show(node, year);
      slider.show(node, year, month);
      sidebar.show(node);
      chart.set_centerNode(node);
      chart.selectNode(node);
    }

    // get current data for all visifies
    function buildData(item) {

      if (!item.amount || !item.amount[year] || !item.amount[year][month])
        return;

      var node = {}
      node['amount'] = item.amount[year][month]
      node['history'] = item.amount
      node['taxonomy'] = item.taxonomy

      $.each(['key', 'label', 'color', 'icon'], function(k, v) {
        node[v] = item[v]
      })

      if (item.children) {
        node.children = []
        $.each(item.children, function(k, v) {
          child = buildData(v)
          if (child) node.children.push(child)
        });
      }

      return node;
    }
  })
