:css
  #description {
    height: 100px;
  }

= content_for :header do
  .head
    %i.fa.fa-money
    #{t('.title')}:
    %span.descr
      #{@taxonomy.title}


.visify.row.budget
  .col-xs-12
    = render partial: 'widgets/visify/sequence', :locals => { budget_file_id: @taxonomy.id }

  .icons.col-xs-12.col-md-5
    = render partial: 'left_icons', :locals => { budget_file_id: @taxonomy.id }

    .slider
      = render partial: 'widgets/visify/slider_chart'
      = render partial: 'widgets/visify/slider_compare', :locals => { budget_file_id: @taxonomy.id}

  .col-xs-12.col-md-7
    #under_sequence
    = render partial: 'sidebar', :locals => { budget_file_id: @taxonomy.id }

  #description.col-xs-12

  = render partial: 'widgets/visify/helpers'

  #charts_tooltip.hidden
    %p
      %span#value

:javascript

  $(document).ready(function() {
    var sequence = aSequence('.visify')
    var chart = aTreeChart('.bubbletree');
    var slider = aSliderCompare('#slider_compare');
    var slider_chart = aSliderChart('#slider_chart', slider);
    var sidebar = aSidebar('.visify');
    var icons = aIcons();


    var year = "#{@sel_year}",
        month = "#{@sel_month}",
        data_type = "plan";

    var _data = null, current_data = null, center_node = null;

    sequence.initializeBreadcrumbTrail({clickCallback: sequenceItemClick});
    slider.initialize(100, {clickCallback: monthItemClick});
    slider_chart.initialize(250, {clickCallback: yearItemClick});
    sidebar.initialize(600, {clickCallback: sequenceItemClick});
    chart.initialize({ width: $(document).width()/2, height: 600, clickCallback: bubbleItemClick });

    d3.json("/widgets/visify/get_visify_level/" + "#{@taxonomy.id}" + "/ktfk_aaa/", function(data) {
      icons.initialize(data, { height: 700, clickCallback: iconsItemClick });
      icons.show(year, month);
    });

    function iconsItemClick(key) {

      d3.json("/widgets/visify/get_bubblesubtree/" + "#{@taxonomy.id}" + "/ktfk_aaa/" + key, function(data) {
        _data = data
        current_data = buildData(_data)
        preprocessData(current_data, 7);
        centerNode = current_data;

        chart.set_centerNode(null);
        sequence.show(current_data);
        chart.show(current_data);
        slider_chart.show(current_data, year);
        slider.show(current_data, year);
        sidebar.show(current_data);
      });
    }

      function preprocessData(root, maxNodes) {
        if (maxNodes + 2 < root.children.length) {
          var tmp = sortChildren(root.children);
          tmp.reverse();
          var keep = [], move = [], moveAmount = 0, breakdown;
          for (var i in root.children) {
            if (i < maxNodes) {
              keep.push(root.children[i]);
            } else {
              move.push(root.children[i]);
              moveAmount += Math.max(0, root.children[i].amount);
            }
          }

          root.children = keep;
          root.children.push({
            'label': I18n.t('other'),
            'name': I18n.t('other'),
            'amount': moveAmount,
            'children': move,
            'breakdown': true,
            'color': 'green',
          });

          for (var i in root.children) {
            if (root.children[i].children)
              preprocessData(root.children[i], maxNodes)
          }
        }
      }

      function sortChildren(children, alternate, sortBy) {
        var tmp = [], odd = true;
        if (sortBy == 'label') {
          sortBy = compareLabels;
          alternate = false;
        } else sortBy = compareAmounts;

        children.sort(sortBy);
        if (alternate) {
          while (children.length > 0) {
            tmp.push(odd ? children.pop() : children.shift());
            odd = !odd;
          }
          return tmp;
        } else {
          return children;
        }

        /*
         * compares two items by amount
         */
        function compareAmounts(a, b) {
            if (a.amount > b.amount) return 1;
            if (a.amount == b.amount) return 0;
            return -1;
        };

        /*
         * compares to item by label
         */
        function compareLabels(a, b) {
            if (a.label > b.label) return 1;
            if (a.label == b.label) return 0;
            return -1;
        };
      }

    function bubbleItemClick(node) {
      sequence.show(node);
      slider_chart.show(node, year);
      if(slider.current_node() != center_node) {
        slider.show(node, year);
      }
      sidebar.show(node);
      chart.set_centerNode(node);
      center_node = node;
    }

    function yearItemClick(new_year) {
      if(slider_chart.current_month != 0 && year == new_year) {
        month = 0;
        slider.set_month(month);
        $("#slider_compare").find("rect").css("fill-opacity", "0.5").css("fill", "#9ecae1");
      }
      year = new_year;
      icons.show(year, month);
      monthItemClick(month);
    }

    function monthItemClick(new_month) {
      if(month == new_month) {
        month = 0;
      } else {
        month = new_month;
      }
      current_data = buildData(_data)
      preprocessData(current_data, 7);

      var curr_node;
      if(center_node != _data) {
        curr_node = chart.get_CenterNode(center_node);
      }
      icons.show(year, month);
      slider.set_centerNode(curr_node);
      chart.show(current_data);
      chart.clickCallback(curr_node);
    }

    function sequenceItemClick(node) {
      sequence.show(node);
      slider_chart.show(node, year);
      slider.show(node, year);
      sidebar.show(node);
      chart.set_centerNode(node);
      chart.selectNode(node);
    }

    // get current data for all visifies
    function buildData(item) {
      if (!item.amount)
        return;

      var node = {}

      node['taxonomy'] = item.taxonomy

      $.each(item.amount, function(k, v) {
        var amount = (v[year] && v[year][month]) ? v[year][month] : null

        if (k == data_type)
          node['amount'] = amount
        else
          node['amount_'+k] = amount
      })

      if (!node['amount'] || node['amount'] == 0)
        return

      node['history'] = item.amount[data_type]

      $.each(['key', 'label', 'color', 'icon'], function(k, v) {
        node[v] = item[v]
      })

      if (item.children) {
        node.children = []
        $.each(item.children, function(k, v) {
          child = buildData(v)
          if (child) node.children.push(child)
        });
      }

      return node;
    }
  })
