= content_for :header do
  .head
    %i.fa.fa-money
    #{t('vtarnay.module5s.show.title')}:
    %span.descr
      =@town

-@rows.each_with_index do |(key,value),index|
  .group.col-xs-12{'data-value' => key}
    %p=key
    -value.each_with_index do |(k,v),i|
      .indicator.col-xs-12.col-sm-6.col-md-4.col-lg-3{'data-value' => k}
        .title=k
        .graph
        .comments

= link_to 'Edit', edit_vtarnay_module5_path(@vtarnay_module5)
\|
= link_to 'Back', vtarnay_module5s_path

:javascript

  $(document).ready(function(){

    var data = JSON.parse('#{@rows.to_json}')
    $.each(data, function(key, value) {
      $.each(value, function(k, v) {
        //console.log(v);
        var years = [];
        var values = [];
        var data = [];
        $.each(v, function(year, year_value){
          years.push(parseInt(year));
          values.push(parseFloat(year_value['value']));
          data.push({"year": year, "value": year_value['value']});
        })

        // define dimensions of graph
        var m = [30, 45, 30, 45]; // margins
        var w = $('div[data-value="' + k + '"]').width() - m[1] - m[3]; // width
        var h = 200 - m[0] - m[2]; // height
        var current_year = d3.max(years);

        // X scale will fit all values from data[] within pixels 0-w
        var x = d3.scale.linear().domain([d3.min(years), d3.max(years)]).range([0, w]);
        // Y scale will fit values from 0-10 within pixels h-0 (Note the inverted domain for the y-scale: bigger is up!)
        var y = d3.scale.linear().domain([d3.min(values) - Math.abs(d3.min(values)/10), d3.max(values)]).range([h, 0]);
            // automatically determining max range can work something like this
            // var y = d3.scale.linear().domain([0, d3.max(data)]).range([h, 0]);

        // create a line function that can convert data[] into x and y points
        var line = d3.svg.line()
            // assign the X function to plot our line as we wish
            .x(function(d,i) { return x(d["year"]); })
            .y(function(d) { return y(d['value']); })

            // Add an SVG element with the desired dimensions and margin.
            var graph = d3.select('div[data-value="' + k + '"] .graph').append("svg:svg")
                  .attr("width", w + m[1] + m[3])
                  .attr("height", h + m[0] + m[2])
                  .on("mouseover", graph_mouseover)
                  .on("mouseout", graph_mouseout)
                .append("svg:g")
                  .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

            // create yAxis
            var xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(false).ticks(2).tickFormat(d3.format("d"));
            // Add the x-axis.
            graph.append("svg:g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + h + ")")
                  .call(xAxis);


            // create left yAxis
            var yAxisLeft = d3.svg.axis().scale(y).ticks(4).orient("left");

            // Add the line by appending an svg:path element with the data line we created above
            // do this AFTER the axes above so that the line is above the tick-lines
            graph.append("svg:path")
                 .attr("d", line(data));

            graph.selectAll("dot")
                    .data(data)
                  .enter().append("circle")
                    .attr("class", function(d) { return d["year"] == current_year ? "active_point" : ""; })
                    .attr("r", function(d) { return d["year"] == current_year ? "10" : "8"; })
                    .attr("cx", function(d) { return x(d["year"]); })
                    .attr("cy", function(d) { return y(d['value']); })
                    .attr("fill", "#6EC4DA")
                    .on("mouseover", mouseover)
                    .on("mouseout", mouseout)
                    .on("click", mouseclick)
                    //.append("title")
                    //   .text(function(d) {
                    //         return aVisify.helpers.formatNumber(d.amount);
                    //   });
            $('div[data-value="' + k + '"] .comments').text(v[d3.max(years)]['comment']);

            function mouseclick(d) {
              if(d["year"] != current_year) {
                $('div[data-value="' + k + '"]').find(".active_point").attr("class", " ").attr("stroke", "none").attr("r","8");
                $(this).attr("class", "active_point").attr("r","10");
                current_year = d["year"];
                $('div[data-value="' + k + '"] .comments').text(v[current_year]['comment']);
              }
            }

            function mouseover(d) {
              d3.select(this)
                .attr("stroke", "#6EC4DA")
                .attr("cursor", "pointer")
                .attr("stroke-width", 4);
            }

            function mouseout(d) {
              if(d["year"] != current_year) {
                d3.select(this)
                  .attr("stroke", "none");
              }
            }

            function graph_mouseover(d) {
              d3.selectAll('div[data-value="' + k + '"] svg path')
                .attr("stroke-width", 2);
            }

            function graph_mouseout(d) {
              d3.selectAll('div[data-value="' + k + '"] svg path')
                .attr("stroke-width", 1);
            }
      })
    })
  })
