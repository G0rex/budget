:css
  .axis text {
    font-size: 10px;
  }

  .y.axis text {
    cursor: pointer;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .bar {
    fill-opacity: .7;
  }

#sidebar_chart

:javascript
  function aSidebarChart(aContainer) {
    var margin = {top: 20, right: 0, bottom: 30, left: 0},
        width, height

    var x, y, xAxis, yAxis

    var svg

    function delay(d, i) { return i * 10; }

    function hide() {
      $("#sidebar_chart").height(0)
      svg.selectAll("*").remove()
    }

    function sort(data) {
      var x0 = y.domain(data.sort(true
              ? function(a, b) { return b.amount - a.amount; }
              : function(a, b) { return d3.ascending(a.label, b.label); })
              .map(function(d) { return d.label; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };

      transition.selectAll(".bar")
          .delay(delay)
          .attr("y", function(d) { return x0(d.label); });

      transition.select(".y.axis")
          .call(yAxis)
        .selectAll("g")
          .delay(delay);
    }

    return {
      initialize: function(pHeight) {
        width = $(aContainer).width() - margin.left - margin.right - 50,
        height = pHeight - margin.top - margin.bottom;

        x = d3.scale.linear()
          .range([0, width]);

        y = d3.scale.ordinal()
          .rangeRoundBands([0, height], .1);

        xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .tickFormat(function(d){
              return aVisify.helpers.formatNumber(d)
            })

        yAxis = d3.svg.axis()
            .scale(y)
            .orient("right")

        svg = d3.select("#sidebar_chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      },
      hide: hide,
      show: function(data) {
        hide();

        if (data == null || data.length < 1) return;

        $("#sidebar_chart").height(height + margin.top + margin.bottom)

        x.domain([0, d3.max(data, function(d) { return d.amount; })]);
        y.domain(data.map(function(d) { return d.label; }));

        sort(data);

        svg.selectAll(".bar")
          .data(data)
        .enter().append("rect")
          .attr("class", "bar")
          .style("fill", function(d) { return d.color || 'silver'; })
          .attr("x", 0)
          .attr("width", 0 )
          .attr("y", function(d) { return y(d.label); })
          .attr("height", y.rangeBand() )
          .style("cursor", function(d, i) {
                              if(i < data.length && data[i].children) return "pointer";
                              return "default";
                            })
          .on("click", function(d, i) {
                if(i < data.length && data[i].children) chart.selectNode(data[i]);
              });

        svg.transition().duration(250).selectAll(".bar")
          .delay(delay)
          .attr("width", function(d) { return x(d.amount); })

        svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .call(xAxis);

        svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
        .append("text")
          .attr("transform", "rotate(-90)")
          .style("text-anchor", "end")
          .style("display", "block");

        d3.selectAll(".y.axis text")
           .style("cursor", function(d, i) {
                              if(i < data.length && data[i].children) return "pointer";
                              return "default";
                            })
           .on("click", function(d, i) {
                if(i < data.length && data[i].children) chart.selectNode(data[i]);
              });
      },
    }
  }