.sunburst
  = render partial: 'tree_chart', :locals => { budget_file_id: @budget_file.id }
  #explanation{ style: "visibility: hidden;" }
    %span#percentage

:javascript
  function aTreeChart(aContainer, sequence, sidebar) {
    var totalSize
    var width, height, radius
    var color
    var svg, partition, arc


    // Main function to draw and set up the visualization, once we have the data.
    function createVisualization(json) {
      root = json
      totalSize = json.amount;

      partition = d3.layout.partition()
        .size([2 * Math.PI, radius])
        .value(function(d) { if (d.amount > totalSize * 0.001) return d.amount; });

      path = svg.data([root]).selectAll("path")
        .data(partition.nodes)
        .enter().append("svg:path")
        .attr("d", arc)
        .style("fill", function(d) { return ((d.children ? d : d.parent).color); })
        .on("click", mouseclick)
        .each(stash);
        //.on("mouseover", mouseover)
        //.on("mouseout", mouseout)
        //.each(stash);

    };

    function mouseclick(d) {
      magnify(d)
      sidebar.show(d)
      sequence.show(d)
    }

    // Fade all but the current sequence, and show it in the breadcrumb trail.
    function mouseover(d) {
      // Fade all the segments.
      svg.selectAll("path")
          .style("opacity", 0.6);

      var percentageString = aVisify.helpers.getPercentageString(d, d.parent ? d.parent.amount : totalSize)
      var sequenceArray = sequence.getAncestors(d);
      sequence.updateBreadcrumbs(sequenceArray, percentageString);

      // Then highlight only those that are an ancestor of the current segment.
      svg.selectAll("path")
          .filter(function(node) {
                    return (sequenceArray.indexOf(node) >= 0);
                  })
          .style("opacity", 1);


      d3.select(".sunburst-seq #explanation #percentage")
          .text(aVisify.helpers.formatNumber(d.amount));

      d3.select(".sunburst-seq #explanation")
          .style("visibility", "");
    }

    // Restore everything to full opacity when moving off the visualization.
    function mouseout(d) {
      sequence.hideBreadcrumb()
    }

    // Distort the specified node to 80% of its parent.
    function magnify(node) {
      if (parent = node.parent) {
        var parent,
            x = parent.x,
            k = .8;
        parent.children.forEach(function(sibling) {
          x += reposition(sibling, x, sibling === node
              ? parent.dx * k / node.value
              : parent.dx * (1 - k) / (parent.value - node.value));
        });
      } else {
        reposition(node, 0, node.dx / node.value);
      }

      path.transition()
          .duration(750)
          .attrTween("d", arcTween);
    }

    // Recursively reposition the node at position x with scale k.
    function reposition(node, x, k) {
      node.x = x;
      if (node.children && (n = node.children.length)) {
        var i = -1, n;
        while (++i < n) x += reposition(node.children[i], x, k);
      }
      return node.dx = node.value * k;
    }

    // Stash the old values for transition.
    function stash(d) {
      d.x0 = d.x;
      d.dx0 = d.dx;
    }

    // Interpolate the arcs in data space.
    function arcTween(a) {
      var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
      return function(t) {
        var b = i(t);
        a.x0 = b.x;
        a.dx0 = b.dx;
        return arc(b);
      };
    }



    function clear() {
      sequence.hideBreadcrumb()
      sidebar.hide()
      svg.selectAll("*").remove()
    }


    return {
      initialize: function(pWidth, pHeight) {
        width = pWidth
        height = pHeight

        $(aContainer + ' #chart').width(width).height(height)

        $('.sunburst-seq #explanation').width(120).css("top", height / 2 + 60 ).css("left", width/2 - 60 );

        // Dimensions of sunburst.
        radius = Math.min(width, height) / 2;

        color = d3.scale.category20c()

        //$(".sunburst-seq #explanation").width(120).css("top", height / 2 ).css("left", width/2 - 70);


        // Mapping of step names to colors.
        // Total size of all segments; we set this later, after loading the data.
        totalSize = 0;

       arc = d3.svg.arc()
         .startAngle(function(d) { return d.x; })
         .endAngle(function(d) { return d.x + d.dx; })
         .innerRadius(function(d) { return d.y; })
         .outerRadius(function(d) { return d.y + d.dy; });

       svg = d3.select(".sunburst #chart").append("svg:svg")
         .attr("width", width)
         .attr("height", height)
         .attr("version", 1.1)
         .attr("xmlns", "http://www.w3.org/2000/svg")
         .append("svg:g")
         .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

      },
      clear: clear,
      show: function(year, month) {
        clear()
        // Use d3.text and d3.csv.parseRows so that we do not need to have a header
        // row, and can receive the csv as an array of arrays.
        d3.json("/widgets/visify/get_bubbletree_data/#{@budget_file.id}/"+ year+ "/" + month, function(data) {
          createVisualization(data);
        });
      },
      selectNode: function (node) {
        mouseclick(node);
      }
    }
  }