.sunburst-seq
  #sidebar.col-xs-3
  #chart
    = render partial: 'sequence', :locals => { budget_file_id: @budget_file.id }
    #explanation{ style: "visibility: hidden;" }
      %span#percentage
      %br
      #code
      %br
      -#Доходи бюджету в розрізі кошиків


:javascript
  $(document).ready(function() {
    // Dimensions of sunburst.
    var width = $(document).width() - $('#sidebar').width() - 50;
    var height = $(document).height() - 270
    var radius = Math.min(width, height) / 2;

    var sequence = aSequence('.sunburst-seq')

    $(".sunburst-seq #chart").width(width).height(height + 120)

    color = d3.scale.category20c()

    $(".sunburst-seq #explanation").width(120).css("top", height / 2 ).css("left", width/2 - 70);


    // Mapping of step names to colors.
    // Total size of all segments; we set this later, after loading the data.
    var totalSize = 0;

    var vis = d3.select(".sunburst-seq #chart").append("svg:svg")
        .attr("width", width)
        .attr("height", height)
        .append("svg:g")
        .attr("id", "container")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var partition = d3.layout.partition()
        .size([2 * Math.PI, radius * radius])
        .value(function(d) { return d.size; });

    var arc = d3.svg.arc()
        .startAngle(function(d) { return d.x; })
        .endAngle(function(d) { return d.x + d.dx; })
        .innerRadius(function(d) { return Math.sqrt(d.y); })
        .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });

    // Use d3.text and d3.csv.parseRows so that we do not need to have a header
    // row, and can receive the csv as an array of arrays.
    d3.json("/widgets/visify/get_sunburst_data/#{budget_file_id}", function(data) {
      createVisualization(data);
    });

    // Main function to draw and set up the visualization, once we have the data.
    function createVisualization(json) {

      // Basic setup of page elements.
      sequence.initializeBreadcrumbTrail();

      // Bounding circle underneath the sunburst, to make it easier to detect
      // when the mouse leaves the parent g.

      vis.append("svg:circle")
          .attr("r", radius)
          .style("opacity", 0);

      // For efficiency, filter nodes to keep only those large enough to see.
      var nodes = partition.nodes(json)
          .filter(function(d) {
          return (d.dx > 0.005); // 0.005 radians = 0.29 degrees
          });

      var path = vis.data([json]).selectAll("path")
          .data(nodes)
          .enter().append("svg:path")
          .attr("display", function(d) { return d.depth ? null : "none"; })
          .attr("d", arc)
          .attr("fill-rule", "evenodd")
          .style("fill", function(d) { return d.color || color(d.value); })
          .style("opacity", 1)
          .on("mouseover", mouseover)
          .on("click", mouseclick);

      // Add the mouseleave handler to the bounding circle.
      d3.select("#container").on("mouseleave", mouseleave);

      // Get total size of the tree = value of root node from partition.
      totalSize = path.node().__data__.value;
     };

    function mouseclick(d) {
      $('.sunburst-seq #sidebar').html(getItemInfoHtml(d))
    }

    // Fade all but the current sequence, and show it in the breadcrumb trail.
    function mouseover(d) {
      var percentageString = sequence.getPercentageString(d, totalSize)

      d3.select(".sunburst-seq #percentage")
          .text(percentageString);

      $('.sunburst-seq #explanation #code').html(d.label)

      d3.select(".sunburst-seq #explanation")
          .style("visibility", "");

      var sequenceArray = sequence.getAncestors(d);
      sequence.updateBreadcrumbs(sequenceArray, percentageString);

      // Fade all the segments.
      vis.selectAll("path")
          .style("opacity", 0.6);

      // Then highlight only those that are an ancestor of the current segment.
      vis.selectAll("path")
          .filter(function(node) {
                    return (sequenceArray.indexOf(node) >= 0);
                  })
          .style("opacity", 1);
    }

    // Restore everything to full opacity when moving off the visualization.
    function mouseleave(d) {

      sequence.hideBreadcrumb()

      // Deactivate all segments during transition.
      vis.selectAll("path").on("mouseover", null);

      // Transition each segment to full opacity and then reactivate it.
      vis.selectAll("path")
          .transition()
          .duration(100)
          .style("opacity", 1)
          .each("end", function() {
                  d3.select(this).on("mouseover", mouseover);
                });

      d3.select("#explanation")
          .style("visibility", "hidden");
    }

    function getItemInfoHtml(node) {
      percentage = (100 * node.size / totalSize).toPrecision(3);
      label = node.label || ''
      div = "<h3>" + label + "</h3>"
        + "<h3 class='percentage'>" + percentage + "%</h3>"
        + "<h4 class='amount'>" + node.size.toLocaleString() + " грн</h4>"

      if (node.description) {
        div = div + "<hr/>" +  "<div class='description'>" + node.description + "</div>"
      }

      return div
    }

  });
