.circles
  = render partial: 'tree_chart', :locals => { budget_file_id: @budget_file.id }

:javascript
  function aTreeChart(aContainer, sequence, sidebar, slider, slider_year) {
    var width, height;
    var color;

    var pack, vis, circle;

    var x, y, r;

    var node, root;
    var totalSize;
    var current_year, current_month;
    var center_node = null;

    function getCenterNode(data) {
      var nodes = pack(data);
      for(i in nodes) {
        if(nodes[i].label == center_node.label && nodes[i].level == center_node.level) {
          if(center_node.parent) {
            if(center_node.parent.label == nodes[i].parent.label && center_node.parent.level == nodes[i].parent.level) {
              return nodes[i];
            }
          } else {
            return nodes[i];
          }
        }
      }
      //console.log("node not found");
    }

    // Main function to draw and set up the visualization, once we have the data.
    function createVisualization(data) {
      if(center_node === null) {
        center_node = data;
      }
      slider_year.set_month(current_month);

      node = root = data;
      var nodes = pack.nodes(root);

      vis.selectAll("circle")
          .data(nodes)
      .enter().append("svg:circle")
          .attr("class", function(d) { return d.children ? "parent" : "child"; })
          .attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; })
          .attr("r", function(d) { return d.r; })
          .on("click", mouseclick)
          .on("mouseover", function(d){ add_tooltip(d3.event, d) })
          .on("mouseout", remove_tooltip);

      totalSize = root.value //vis.selectAll("circle").node().__data__.value

      vis.selectAll(".parent")
          .style("fill", "#1f77b4")
          .style("fill-opacity", ".1")
          .style("stroke", "steelblue")

      vis.selectAll(".child")
          .style("fill", "#ccc")
          .style("stroke", "#999")

      //vis.selectAll("text")
      //    .data(nodes)
      //.enter().append("svg:text")
      //    .attr("class", function(d) { return d.children ? "parent" : "child"; })
      //    .attr("x", function(d) { return d.x; })
      //    .attr("y", function(d) { return d.y; })
      //    .attr("dy", ".35em")
      //    .attr("text-anchor", "middle")
      //    .style("opacity", function(d) {
      //      return d.depth == (center_node.depth + 1) && d.r > 20 ? 1 : 0;
      //    })
      //    .text(function(d) { return d.children ? d.label : ''; });
    };

    function clear() {
      sidebar.hide();
      vis.selectAll("*").remove();
    }

    function mouseclick(d) {
      circle.css("stroke", "rgb(70, 130, 180)");
      if(d.children) {
        sidebar.show(d);
      } else {
        sidebar.hide();
        sidebar.showUndersequence(d);
      }
      //console.log(d);
      sequence.show(d);

      if(center_node && (center_node.label != d.label || center_node.level != d.level)) {
        slider.show(d, current_month, current_year);
        slider_year.show(d, current_month, current_year);
      } else {
        slider_year.set_month(current_month);
      }
      if(d.icon == "fa-folder-open-o") {
        $(".slider").slideUp();
      } else {
        $(".slider").slideDown();
      }
      center_node = d;
      zoom(node == d ? root : d)
    }

    function zoom(d, i) {
      var k = r / d.r / 2;
      x.domain([d.x - d.r, d.x + d.r]);
      y.domain([d.y - d.r, d.y + d.r]);

      var t;
      if(d3.event) {
        t = vis.transition()
            .duration(d3.event.altKey ? 7500 : 750);
      } else {
        t = vis.transition();
      }

      t.selectAll("circle")
          .attr("cx", function(d) { return x(d.x); })
          .attr("cy", function(d) { return y(d.y); })
          .attr("r", function(d) { return k * d.r; });

      //t.selectAll("text")
      //    .attr("x", function(d) { return x(d.x); })
      //    .attr("y", function(d) { return y(d.y); })
      //    .style("opacity", function(d) {
      //      return (d.depth == (center_node.depth + 1) && k * d.r > 20) ? 1 : 0;
      //    });

      node = d;

      if(d3.event) {
        d3.event.stopPropagation();
      }
    }

    return {
      initialize: function(pWidth, pHeight) {
        width = pWidth
        height = pHeight

        r = height
        color = d3.scale.category20c()

        totalSize = 0;

        x = d3.scale.linear().range([0, r]),
        y = d3.scale.linear().range([0, r]),

        pack = d3.layout.pack()
          .size([r, r])
          .value(function(d) { return d.amount; })

        vis = d3.select(aContainer + ' #chart')
          .style("width", width + "px")
          .style("height", height + "px")
        .append("svg:svg", 'h2')
          .attr("width", width)
          .attr("height", height)
          .attr("version", 1.1)
          .attr("xmlns", "http://www.w3.org/2000/svg")
        .append("svg:g")
          .attr("transform", "translate(" + (width - r) / 2 + "," + (height - r) / 2 + ")");
      },
      clear: clear,
      show: function(year, month) {
        d3.json("/widgets/visify/get_bubbletree_data/#{@budget_file.id}/"+ year+ "/" + month, function(data) {
          clear();
          current_year = year;
          current_month = month;
          if(center_node === null) {
            slider.show(data, current_month, current_year);
            slider_year.show(data, current_month, current_year);
            sidebar.show(data);
          }
          createVisualization(data);
          var node = getCenterNode(data);
          if(node != data) {
            mouseclick(node);
          } else {
            sidebar.show(data);
          }
        });
      },
      selectNode: function (node) {
        mouseclick(node);
      },
      mouseover: function (node) {
        circle = $("#chart circle[cx='" + node.x + "'][cy='" + node.y + "']");
        //console.log(circle);
        circle.css("stroke", "white");
      },
      mouseleave: function (node) {
        circle.css("stroke", "rgb(70, 130, 180)");
      }
    }
  }