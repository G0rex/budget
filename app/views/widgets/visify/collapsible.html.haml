-# http://redotheweb.com/CodeFlower/

= javascript_include_tag "d3.geom.js"

.collapsible
  = render partial: 'tree_chart', :locals => { budget_file_id: @budget_file.id }

:javascript
  function aTreeChart(aContainer, sequence, sidebar, slider, slider_year) {
    var width, height;
    var color;

    var vis, force;

    var root, nodes, links;

    var totalSize;

    var size_scale;
    var current_year, current_month;
    var center_node = null;

    function getCenterNode(data) {
      for(i in nodes) {
        if(nodes[i].label == center_node.label && nodes[i].level == center_node.level) {
          if(center_node.parent) {
            if(center_node.parent.label == nodes[i].parent.label && center_node.parent.level == nodes[i].parent.level) {
              return nodes[i];
            }
          } else {
            return nodes[i];
          }
        }
      }
      //console.log("node not found");
    }

    // Main function to draw and set up the visualization, once we have the data.
    function createVisualization(json) {
      if(center_node === null) {
        center_node = json;
      }
      slider_year.set_month(current_month);

      root = json;
      root.fixed = true;
      root.x = width / 2;
      root.y = height / 2 - 80;

      totalSize = root.amount;
      size_scale.domain([0, totalSize]);

      update();
    }

    function tick() {
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });
    }

    function clear() {
      sidebar.hide()
      vis.selectAll("*").remove()
    }

    function dblclick(d) {
      if (d.children) {
        sidebar.show(d);
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
      update();
      sequence.show(d);

      if(center_node && (center_node.label != d.label || center_node.level != d.level)) {
        slider.show(d, current_month, current_year);
        slider_year.show(d, current_month, current_year);
      } else {
        slider_year.set_month(current_month);
      }

      center_node = d;
    }

    function update() {
      nodes = flatten( root )
      links = d3.layout.tree().links(nodes);

      // Restart the force layout.
      force
          .nodes(nodes)
          .links(links)
          .start();

      // Update the links…
      link = vis.selectAll("line.link")
        .data(links, function(d) { return d.target.id; });

      // Enter any new links.
      link.enter().insert("svg:line", ".node")
          .attr("class", "link")
          .attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      // Exit any old links.
      link.exit().remove();

      // Update the nodes…
      node = vis.selectAll("circle.node")
          .data(nodes, function(d) { return d.id; })
          .style("fill", color);

      node.transition()
          .attr("r", function(d) { return size_scale(d.amount) });

      // Enter any new nodes.
      node.enter().append("svg:circle")
          .attr("class", "node")
          .attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; })
          .attr("r", function(d) { return size_scale(d.amount) })
          .style("fill", color)
          .on("click", mouseclick)
          //.on("dblclick", dblclick)
          .on("mouseover", mouseover)
          .on("mouseleave", mouseleave)
          .call(force.drag);

      // Exit any old nodes.
      node.exit().remove();

      // Color leaf nodes orange, and packages white or blue.
      function color(d) {
        return d.color || color(d.amount)
        //return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
      }

      function mouseover(d) {
        add_tooltip(d);
        sequence.show(d);
      }

      function mouseleave(d) {
        remove_tooltip(d);
        sequence.show(center_node);
      }

      function mouseclick(d) {
        //sequence.show(d);
        dblclick(d);
      }

      // Returns a list of all nodes under the root.
      function flatten(root) {
        var nodes = [], i = 0;

        function recurse(node) {
          if (node.children) {
            $.each(node.children, function( index, value ) {
              value.parent = node
            })

            node.amount = node.children.reduce(function(p, v) { return p + recurse(v); }, 0);
          }
          if (!node.id) node.id = ++i;
          nodes.push(node);
          return node.amount;
        }

        root.amount = recurse(root);
        return nodes;
      }
    }

    return {
      initialize: function(pWidth, pHeight) {
        width = pWidth
        height = pHeight

        color = d3.scale.category20c()

        totalSize = 0;

        size_scale = d3.scale.linear()
          .range([5, 30]);


        force = d3.layout.force()
            .on("tick", tick)
            .charge(function(d) { return -90; })
            .linkDistance(function(d) { return d.target._children ? 80 : 20; })
            .size([width, height - 100]);

        vis = d3.select(".collapsible #chart").append("svg:svg")
            .attr("width", width)
            .attr("height", height)
            .attr("version", 1.1)
            .attr("xmlns", "http://www.w3.org/2000/svg");
   },
      clear: clear,
      show: function(year, month) {
        clear()
        d3.json("/widgets/visify/get_bubbletree_data/#{@budget_file.id}/"+ year+ "/" + month, function(data) {
          clear();
          current_year = year;
          current_month = month;
          if(center_node === null) {
            slider.show(data, current_month, current_year);
            slider_year.show(data, current_month, current_year);
            sidebar.show(data);
          }
          createVisualization(data);
          var node = getCenterNode(data);
          if(node != data) {
            dblclick(node);
          } else {
            sidebar.show(data);
          }
        });
      },
      selectNode: function (node) {
        dblclick(node);
      }
    }
  }