:css
  .axis text {
    font-size: 10px;
  }

  .y.axis text {
    cursor: pointer;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .bar {
    fill-opacity: .7;
  }

#sidebar_chart

:javascript
  function aSidebarChartBattery(aContainer) {
    var margin = {top: 20, right: 0, bottom: 30, left: 80},
        width, height

    var x, y, xAxis, yAxis

    var svg, _self;

    function delay(d, i) { return i * 10; }

    function hide() {
      $("#sidebar_chart").height(0)
      svg.selectAll("*").remove()
    }

    function sort(data) {
      var x0 = y.domain(data.sort(true
              ? function(a, b) {
                  if(!a.amount_fact) a.amount_fact = 0;
                  if(!b.amount_fact) b.amount_fact = 0;
                  return (b.amount > b.amount_fact ? b.amount : b.amount_fact) - (a.amount > a.amount_fact ? a.amount : a.amount_fact);
                }
              : function(a, b) { return d3.ascending(a.label, b.label); })
              .map(function(d) { return d.key; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };

      transition.selectAll(".bar")
          .delay(delay)
          .attr("y", function(d) { return x0(d.label); });

      transition.select(".y.axis")
          .call(yAxis)
        .selectAll("g")
          .delay(delay);
    }

    function add_plan_fact_tooltip(event, d) {
        //Get this bar's x/y values, then augment for the tooltip
        var sequence_height = $('#sequence').outerHeight() + $('#under_sequence').outerHeight();
        var evt = event || window.event;
        var xPosition = evt.pageX;
        var yPosition = evt.pageY - sequence_height;


        //Update the tooltip position and value
        var html;
        if(d.color == 'green') {
            html = aVisify.helpers.formatNumber(d.amount)
        } else {
            html = "<div style='display: inline-block; width: 10px; height: 10px; background-color: " + d3.rgb(d.color).brighter(.2) + "'></div> "
                    + I18n.t('js.visify.plan') + ": " + aVisify.helpers.formatNumber(d.amount) +
                    "<br /><div style='display: inline-block; width: 10px; height: 10px; background-color: " + d3.rgb(d.color).darker(.4) + "'></div> " +
                    I18n.t('js.visify.fact') + ": " + aVisify.helpers.formatNumber(d.amount_fact)
        }
        d3.select("#charts_tooltip")
                .style("left", xPosition + "px")
                .style("top", yPosition + "px")
                .style('text-align', 'left')
                .select("#value")
                .html(html);

        //Show the tooltip
        d3.select("#charts_tooltip").classed("hidden", false);
    }

    function remove_tooltip(d) {
        //Hide the tooltip
        d3.select("#charts_tooltip").classed("hidden", true);
    }

    return {
      initialize: function(options) {
        I18n.locale = window.aHelper.lang();
        _self = this;
        _self.clickCallback = options.clickCallback;
        $("#sidebar_chart").html('');

        width = $(".sidebar").width() - margin.left - margin.right,

        x = d3.scale.linear()
          .range([0, width]);

        y = d3.scale.ordinal()

        xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom")
            .tickFormat(function(d){
              return aVisify.helpers.formatNumber(d)
            })

        yAxis = d3.svg.axis()
            .scale(y)
            .orient("right")

        svg = d3.select("#sidebar_chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", '100%');
      },
      hide: hide,
      show: function(data) {
        hide();

        if (!data == null || data.length < 1) return;

        svg_height = data.length * 50;
        $("#sidebar_chart").height('100%')
        svg.attr("height", svg_height + margin.top + margin.bottom);

        // add hatch to fill the bars
        svg
          .append('defs')
          .append('pattern')
            .attr('id', 'diagonalHatch')
            .attr('patternUnits', 'userSpaceOnUse')
            .attr('width', 4)
            .attr('height', 4)
          .append('path')
            .attr('d', 'M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2')
            .attr('stroke', 'black')
            .attr('stroke-width', 1);
        svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        x.domain([0, d3.max(data, function(d) { return d.amount > (d.amount_fact || 0) ? d.amount : (d.amount_fact || 0) })]);
        y.rangeRoundBands([0, svg_height], .1)
         .domain(data.map(function(d) { return d.key; }));

        sort(data);

        var visifier = $(".visify").parent().attr('class');

        var bars = svg.selectAll(".bar")
          .data(data)
          .style("cursor", "pointer")

        bars.enter().append("rect")
          .attr("class", "bar low")
          .attr("x", margin.left)
          .attr("width", 0 )
          .attr("y", function(d) { return y(d.key) + margin.top; })
          .attr("height", y.rangeBand() )
          //.on("mouseover", function(d){ add_plan_fact_tooltip(d3.event, d) })
          //.on("mouseout", remove_tooltip)
          .style("fill-opacity", 1.0)
          .style("cursor", function(d,i) { return (data[i].children && data[i].children.length == 0) ? "default" : "pointer" })
          .on("click", function(d, i) {
                _self.clickCallback(data[i]);
              });

        bars.enter().append("rect")
          .attr("class", "bar up")
          .attr("x", margin.left)
          .attr("width", 0 )
          .attr("y", function(d) { return y(d.key) + margin.top; })
          .attr("height", y.rangeBand() )
          //.on("mouseover", function(d){ add_plan_fact_tooltip(d3.event, d) })
          //.on("mouseout", remove_tooltip)
          .style("fill-opacity", 1.0)
          .style("cursor", function(d,i) { return (data[i].children && data[i].children.length == 0) ? "default" : "pointer" })
          .on("click", function(d, i) {
                _self.clickCallback(data[i]);
              });

        svg.transition().duration(250).selectAll(".bar.low")
          .delay(delay)
          .attr("width", function(d) { return x(d.amount > (d.amount_fact || 0) ? d.amount : (d.amount_fact || 0)); })
          .style("fill", function(d) {
                            //if (d.amount_fact > 0 && d.label != "Інше") {
                            //  var percent = d.amount_fact*100 / d.amount;
                            //  if(percent < 70) return "#DF0101";
                            //  if(percent < 90) return "#F3F781";
                            //  if(percent > 90) return "#04B404";
                            //}
                            return d3.rgb(d.color)
                         })

        svg.transition().duration(250).selectAll(".bar.up")
          .delay(delay)
          .attr("width", function(d) { return x(d.amount < (d.amount_fact || 0) ? d.amount : (d.amount_fact || 0)); })
          .style("fill", 'url(#diagonalHatch)')
          .style('stroke', function(d) { return d3.rgb(d.color).darker(1) })
          .style('stroke-width', '.1')

        var bar_text = svg.append("g")
          .attr("class", "y axis")
          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
          .call(yAxis);

        bar_text.selectAll("text")
          .text(function(d, i) {return data[i].label; })
          .style("cursor", "pointer")
          //.on("mouseover", function(d, i){ add_plan_fact_tooltip(d3.event, data[i]) })
          //.on("mouseout", remove_tooltip)
          .style("cursor", function(d,i) { return (data[i].children && data[i].children.length == 0) ? "default" : "pointer" })
          .on("click", function(d, i) {
                  _self.clickCallback(data[i]);
              });
        bar_text.selectAll("g")
                .append("text")
                .html(function(d, i) {
                  return I18n.t('js.visify.plan') + ": " + aVisify.helpers.formatNumber(data[i].amount || 0);
                })
                .attr("x",-margin.left)
        bar_text.selectAll("g")
                .append("text")
                .html(function(d, i) {
                  return I18n.t('js.visify.fact') + ": " + aVisify.helpers.formatNumber(data[i].amount_fact || 0);
                })
                .attr("x",-margin.left)
                .attr("dy","1.1em")
      },
    }
  }