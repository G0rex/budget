:css
  .axis text {
    font-size: 10px;
  }

  .y.axis text {
    cursor: pointer;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .bar {
    fill-opacity: .7;
  }

#sidebar_chart

:javascript
  function aSidebarChartBattery(aContainer) {
    var margins = {top: 12, right: 24, bottom: 24, left: 48},
        width, height,
        x, y, xAxis, yAxis,
        svg, _self;

    function delay(d, i) { return i * 10; }

    function hide() {
      $("#sidebar_chart").height(0)
      svg.selectAll("*").remove()
    }

    function sort(data) {
      var x0 = y.domain(data.sort(true
              ? function(a, b) { return b.amount - a.amount; }
              : function(a, b) { return d3.ascending(a.label, b.label); })
              .map(function(d) { return d.key; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };

      transition.selectAll(".bar")
          .delay(delay)
          .attr("y", function(d) { return x0(d.label); });

      transition.select(".y.axis")
          .call(yAxis)
        .selectAll("g")
          .delay(delay);
    }

    return {
      initialize: function(pHeight, options) {

        _self = this;
        _self.clickCallback = options.clickCallback;
        $("#sidebar_chart").html('');

        width = $(aContainer).width() - margins.left - margins.right - 50;
        height = pHeight - margins.top - margins.bottom;
        svg = d3.select('#sidebar_chart')
          .append('svg')
          .attr('width', width + margins.left + margins.right)
          .attr('height', height + margins.top + margins.bottom)
          .append('g')
          .attr('transform', 'translate(' + margins.left + ',' + margins.top + ')');
      },
      hide: hide,
      show: function(data) {
        console.log("chart", data);
        hide();

        if (!data == null || data.length < 1) return;

        $("#sidebar_chart").height(height + margins.top + margins.bottom);

        dataset = [{
          data: data,
          name: 'Plan'
        }, {
          data: data,
          name: 'Fact'
        }

        ],
        series = dataset.map(function (d) {
          return d.name;
        }),
        dataset = dataset.map(function (d) {
          return d.data.map(function (o, i) {
            // Structure it so that your numeric
            // axis (the stacked amount) is y
            return {
              y: o.amount,
              x: o.label
            };
          });
        }),
        stack = d3.layout.stack();

      stack(dataset);

      var dataset = dataset.map(function (group) {
        return group.map(function (d) {
          // Invert the x and y values, and y0 becomes x0
          return {
            x: d.y,
            y: d.x,
            x0: d.y0
          };
        });
      }),
        xMax = d3.max(dataset, function (group) {
          return d3.max(group, function (d) {
            return d.x + d.x0;
          });
        }),
        xScale = d3.scale.linear()
          .domain([0, xMax])
          .range([0, width]),
        months = dataset[0].map(function (d) {
          return d.y;
        }),
        yScale = d3.scale.ordinal()
          .domain(months)
          .rangeRoundBands([0, height], .1),
        xAxis = d3.svg.axis()
          .scale(xScale)
          .orient('bottom'),
        yAxis = d3.svg.axis()
          .scale(yScale)
          .orient('left'),
        colours = d3.scale.category10(),
        groups = svg.selectAll('g')
          .data(dataset)
          .enter()
          .append('g')
          .style('fill', function (d, i) {
          return colours(i);
        }),
        rects = groups.selectAll('rect')
          .data(function (d) {
          return d;
        })
          .enter()
          .append('rect')
          .attr('x', function (d) {
          return xScale(d.x0);
        })
          .attr('y', function (d, i) {
          return yScale(d.y);
        })
          .attr('height', function (d) {
          return yScale.rangeBand();
        })
          .attr('width', function (d) {
          return xScale(d.x);
        })
          .on('mouseover', function (d) { })
          .on('mouseout', function () { })

        svg.append('g')
          .attr('class', 'axis')
          .attr('transform', 'translate(0,' + height + ')')
          .call(xAxis);

      svg.append('g')
        .attr('class', 'axis')
        .call(yAxis);

      svg.append('rect')
        .attr('fill', 'yellow')
        .attr('width', 160)
        .attr('height', 30 * dataset.length)
        .attr('x', width + margins.left)
        .attr('y', 0);

      series.forEach(function (s, i) {
        svg.append('text')
          .attr('fill', 'black')
          .attr('x', width + margins.left + 8)
          .attr('y', i * 24 + 24)
          .text(s);
        svg.append('rect')
          .attr('fill', colours(i))
          .attr('width', 60)
          .attr('height', 20)
          .attr('x', width + margins.left + 90)
          .attr('y', i * 24 + 6);
      });

      },
    }
  }