:css
  .axis text {
    font-size: 10px;
  }

  .y.axis text {
    cursor: pointer;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .bar {
    fill-opacity: .7;
  }

#sidebar_chart

:javascript
  function aSidebarChartBattery(aContainer) {
    var margins = {top: 12, right: 24, bottom: 24, left: 48},
        width, height,
        x, y, xAxis, yAxis,
        svg, _self;

    function hide() {
      $("#sidebar_chart").height(0)
      svg.selectAll("*").remove()
    }

    function sort(data) {
      for(i in data) {

        var tmp = data[i];
        var next_data = data[parseInt(i)+1];

        if(!data[i].amount_fact) data[i].amount_fact = 0;
        if(!data[i].amount) data[i].amount = 0;
        if(next_data) {
          if(!data[parseInt(i)+1].amount) data[parseInt(i)+1].amount = 0;
          if(!data[parseInt(i)+1].amount_fact) data[parseInt(i)+1].amount_fact = 0;
        }

        if(next_data && ((next_data.amount + next_data.amount_fact) > (tmp.amount + tmp.amount_fact))) {
          data[i] = next_data;
          data[parseInt(i)+1] = tmp;
          sort(data);
        }
      }
    }

    return {
      initialize: function(pHeight, options) {

        _self = this;
        _self.clickCallback = options.clickCallback;
        $("#sidebar_chart").html('');

        width = $(aContainer).width() - margins.left - margins.right - 50;
        height = pHeight - margins.top - margins.bottom;
        svg = d3.select('#sidebar_chart')
          .append('svg')
          .attr('width', width + margins.left + margins.right)
          .attr('height', height + margins.top + margins.bottom)
          .append('g')
          .attr('transform', 'translate(' + margins.left + ',' + margins.top + ')');
      },
      hide: hide,
      show: function(data) {
        hide();

        if (!data == null || data.length < 1) return;

        $("#sidebar_chart").height(height + margins.top + margins.bottom);

        var _data = [],
            data_diff = [];

        sort(data);

        //for(i in data) {
        //  console.log(data[i].label, data[i].amount + data[i].amount_fact)
        //}

        $.each(data, function(i, d) {

          _data.push({'label': d.label, 'amount': d.amount_fact, 'color': 'green', 'node': d});

          if(d.amount_fact <= d.amount) {
            data_diff.push({'label': d.label, 'amount': (d.amount - d.amount_fact), 'color': 'yellow', 'node': d});
          } else {
            data_diff.push({'label': d.label, 'amount': (d.amount_fact - d.amount), 'color': 'red', 'node': d});
          }
        })

        dataset = [{ data: _data }, { data: data_diff }],
        dataset = dataset.map(function (d) {
          return d.data.map(function (o, i) {
            // Structure it so that your numeric
            // axis (the stacked amount) is y
            return {
              y: o.amount,
              x: o.label,
              color: o.color,
              node: o.node
            };
          });
        }),
        stack = d3.layout.stack();

        stack(dataset);

        var dataset = dataset.map(function (group) {
          return group.map(function (d) {
            // Invert the x and y values, and y0 becomes x0
            return {
              x: d.y,
              y: d.x,
              x0: d.y0,
              color: d.color,
              node: d.node
            };
          });
        }),
        xMax = d3.max(dataset, function (group) {
          return d3.max(group, function (d) {
            return d.x + d.x0;
          });
        }),
        xScale = d3.scale.linear()
          .domain([0, xMax])
          .range([0, width]),
        labels = dataset[0].map(function (d) {
          return d.y;
        }),
        yScale = d3.scale.ordinal()
          .domain(labels)
          .rangeRoundBands([0, height], .1),
        xAxis = d3.svg.axis()
          .scale(xScale)
          .orient('bottom'),
        yAxis = d3.svg.axis()
          .scale(yScale)
          .orient('left'),
        colours = d3.scale.category10(),
        groups = svg.selectAll('g')
          .data(dataset)
          .enter()
          .append('g')
          ,
        rects = groups.selectAll('rect')
          .data(function (d) {
            return d;
          })
          .enter()
          .append('rect')
          .attr('x', function (d) {
          return xScale(d.x0);
        })
          .attr('y', function (d, i) {
          return yScale(d.y);
        })
          .attr('height', function (d) {
          return yScale.rangeBand();
        })
          .attr('width', function (d) {
          return xScale(d.x);
        })
          .style('fill', function (d, i) {
                    return d.color;
                  })
          .style("cursor", "pointer")
          .on('mouseover', function (d) { })
          .on('mouseout', function () { })
          .on("click", function(d) {
                          _self.clickCallback(d.node);
                        });

        svg.append('g')
          .attr('class', 'axis')
          .attr('transform', 'translate(0,' + height + ')')
          .call(xAxis);

        svg.append('g')
          .attr('class', 'axis')
          .call(yAxis);

      },
    }
  }