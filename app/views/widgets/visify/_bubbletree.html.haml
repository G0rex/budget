-#https://github.com/okfn/bubbletree

= javascript_include_tag "jquery.history.js"
= javascript_include_tag "raphael.js"
= javascript_include_tag "vis4.js"
= javascript_include_tag "Tween.js"
= javascript_include_tag "bubbletree.js"
= javascript_include_tag "cofog.js"

.bubbletree
  = render partial: 'sequence', :locals => { budget_file_id: @budget_file.id }
  = render partial: 'sidebar', :locals => { budget_file_id: @budget_file.id }
  #chart
.col-xs-offset-1.col-xs-6
  #date-slider{:style => 'margin-top: 50px'}

:javascript

  function aBubbletree(aContainer, sequence, sidebar) {
    bubbleTree = null;
    totalSize = null;

    //function getTooltipHtml(node) {
    //  percParentTitle = ''
    //  if (node.parent && node.amount < node.parent.amount) {
    //    percentage = (100 * node.amount / node.parent.amount).toPrecision(3)
    //    percParentTitle = ' від ' + node.parent.label || ''
    //  }
    //  else {
    //    percentage = '100'
    //  }
    //
    //  label = node.label || ''
    //  div = "<h3 class='percentage'>" + percentage + "% </h3> <h5> " + node.amount.toLocaleString() + " грн </h5>" +
    //    + percParentTitle
    //    + "<hr/>"
    //    + "<div>" + label + "</div>"
    //
    //  return div
    //}
    //

    return {

      initialize: function(width, height) {
        $(aContainer + ' #chart').width(width).height(height)
      },

      show: function(year, month) {
        d3.json("/widgets/visify/get_bubbletree_data/#{budget_file_id}/"+ year+ "/" + month, function(data) {

          d3.select(aContainer + ' #chart').selectAll("*").remove()
          if (data == null) return

          bubbleTree = new BubbleTree({
              data: data,
              container: aContainer + ' #chart',

              sortBy: 'label',

              maxNodesPerLevel: 12,

              bubbleType: ['icon', 'plain'],

              tooltip: function(d) {
                if (d.type == 'HIDE') {
                  sequence.hideBreadcrumb()
                } else {
                  var percentageString = sequence.getPercentageString(d.node, totalSize)
                  var sequenceArray = sequence.getAncestors(d.node);
                  sequence.updateBreadcrumbs(sequenceArray, percentageString);
                }
              },
              nodeClickCallback: function(node) {
                sidebar.show(node)
              }
          });

          totalSize = data.size;
        })
      }

    }
  }

:javascript
  $(document).ready(function() {

    //d3.select('#date-slider').call(d3.slider().axis(true).min(2000).max(2100).step(5));

    var width = $(document).width() - $('#sidebar').width() - 50;
    height = $(document).height() - 200

    var sequence = aSequence('.bubbletree')
    sequence.initializeBreadcrumbTrail();

    var sidebar = aSidebar('.bubbletree')
    sidebar.initialize(height);

    var bblchart = aBubbletree('.bubbletree', sequence, sidebar)
    bblchart.initialize(width, height);
    bblchart.show(2014, 0)


    d3.select('#date-slider').call(d3.slider()
      .axis(d3.svg.axis().orient("top"))
      .min(0).max(13).step(1)
      .on("slide", function(evt, value) {
        console.log(bubbleTree)
        bblchart.show(2014, value)
      })
    );


    //var tooltip = d3.select(".bubbletree").append("div")
    //    .attr("id", "tooltip")
    //    .style("opacity", 0);
    //
    //var tooltipTimer

  });
