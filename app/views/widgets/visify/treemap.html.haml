.treemap
  = render partial: 'tree_chart', :locals => { budget_file_id: @budget_file.id }

:javascript
  function aTreeChart(aContainer, sequence, sidebar, slider, slider_year) {
    var width, height
    var color

    var treemap, svg;

    var x, y;

    var totalSize
    var node, root;
    var current_year, current_month;
    var center_node = null;

    function getCenterNode(data) {
      var nodes = treemap(data);
      for(i in nodes) {
        if(nodes[i].label == center_node.label && nodes[i].level == center_node.level) {
          if(center_node.parent) {
            if(center_node.parent.label == nodes[i].parent.label && center_node.parent.level == nodes[i].parent.level) {
              return nodes[i];
            }
          } else {
            return nodes[i];
          }
        }
      }
      //console.log("node not found");
    }

    // Main function to draw and set up the visualization, once we have the data.
    function createVisualization(json) {
      if(center_node === null) {
        center_node = json;
      }
      slider_year.set_month(current_month);
      node = root = json;

      var nodes = treemap.nodes(root)
          .filter(function(d) { return !d.children; });

      var cell = svg.selectAll("g")
          .data(nodes)
          .enter().append("svg:g")
          .attr("class", "cell")
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
          .on("click", mouseclick)
          //.on("dblclick", dblclick)
          .on("mouseover", function(d){ mouseover(d3.event, d) })
          .on("mouseleave", mouseleave);

      cell.append("svg:rect")
          .attr("width", function(d) { return d.dx - 1; })
          .attr("height", function(d) { return d.dy - 1; })
          .style("fill", function(d) { return d.parent.color || color(d.label); });

      cell.append("svg:text")
          .attr("x", function(d) { return d.dx / 2; })
          .attr("y", function(d) { return d.dy / 2; })
          .attr("dy", ".35em")
          .attr("text-anchor", "middle")
          .text(function(d) { return d.label; })
          .style("opacity", function(d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });

      //d3.select(window).on("click", function() { zoom(root); });

      d3.select("select").on("change", function() {
        treemap.value(this.value == "size" ? size : count).nodes(root);
        zoom(node);
      });

      totalSize = root.value;
    };

    function mouseclick(d) {
    if(d.children) {
      sidebar.show(d);
    } else {
      sidebar.hide();
    }

      zoom(d);

      if(center_node && (center_node.label != d.label || center_node.level != d.level)) {
        slider.show(d, current_month, current_year);
        slider_year.show(d, current_month, current_year);
      } else {
        slider_year.set_month(current_month);
      }

      center_node = d;
    }

    function mouseover(event, d) {
      add_tooltip(event, d);
      sequence.show(d);
    }

    function mouseleave(d) {
      remove_tooltip(d);
      sequence.show(center_node);
    }

    function dblclick(d) {
      //zoom(d);
    }

    function clear() {
      sidebar.hide()
      svg.selectAll("*").remove()
    }

    function size(d) {
      return d.amount;
    }

    function count(d) {
      return 1;
    }

    function zoom(d) {
      var kx = width / d.dx, ky = height / d.dy;
      x.domain([d.x, d.x + d.dx]);dblclick
      y.domain([d.y, d.y + d.dy]);

      var t;

      if(d3.event) {
        t = svg.selectAll("g.cell").transition()
            .duration(d3.event.altKey ? 7500 : 750)
            .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });
      } else {
        t = svg.selectAll("g.cell").transition()
             .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });
      }

      t.select("rect")
          .attr("width", function(d) { return kx * d.dx - 1; })
          .attr("height", function(d) { return ky * d.dy - 1; })

      t.select("text")
          .attr("x", function(d) { return kx * d.dx / 2; })
          .attr("y", function(d) { return ky * d.dy / 2; })
          .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

      node = d;
      //sequence.show(d);
      //sidebar.show(d);
      if(d3.event) {
        d3.event.stopPropagation();
      }
    }


    return {
      initialize: function(pWidth, pHeight) {
        width = pWidth
        height = pHeight

        $(aContainer + ' #chart').width(width).height(height)

        color = d3.scale.category20c()

        totalSize = 0;

        x = d3.scale.linear().range([0, width]),
        y = d3.scale.linear().range([0, height]),

        treemap = d3.layout.treemap()
            .round(false)
            .size([width, height])
            .sticky(false)
            .value(function(d) { return d.amount; });

        svg = d3.select(".treemap #chart")
            .style("width", width + "px")
            .style("height", height + "px")
          .append("svg:svg")
            .attr("width", width - 20)
            .attr("height", height)
            .attr("version", 1.1)
            .attr("xmlns", "http://www.w3.org/2000/svg")
          .append("svg:g")
            .attr("transform", "translate(.5,.5)");

      },
      clear: clear,
      show: function(year, month) {
        // Use d3.text and d3.csv.parseRows so that we do not need to have a header
        // row, and can receive the csv as an array of arrays.
        d3.json("/widgets/visify/get_bubbletree_data/#{@budget_file.id}/"+ year+ "/" + month, function(data) {
          clear();
          current_year = year;
          current_month = month;
          if(center_node === null) {
            slider.show(data, current_month, current_year);
            slider_year.show(data, current_month, current_year);
            sidebar.show(data);
          }
          createVisualization(data);
          var node = getCenterNode(data);
          if(node != data) {
            mouseclick(node);
          } else {
            sidebar.show(data);
          }
        });
      },
      selectNode: function (node) {
        mouseclick(node);
      }
    }
  }