:css
  #slider_chart .axis text {
    font: 10px sans-serif;
    fill: #888888;
  }

  #slider_chart .axis path,
  #slider_chart .axis line {
    fill: none;
    stroke: #C8C8C8;
    stroke-width: 1;
    shape-rendering: crispEdges;
  }

  .bar {
    fill: steelblue;
    cursor: pointer;
  }

  #slider_chart .bartext {
    font-size: 0.6em;
  }

  label {
    position: absolute;
    top: 10px;
    right: 10px;
  }

  .active_point {
    stroke: #3182bd;
    stroke-width: 2;
  }

#slider_chart.col-xs-12


:javascript
  function aSliderChart(aContainer, slider) {
    var margin = {top: 20, right: 20, bottom: 30, left: 50},
        width, height;

    var x, y, xAxis, yAxis, size_scale;

    var svg;

    var color;

    var data, center_node;

    var current_month = 0, current_year = 0;

    function delay(d, i) { return i * 10; }

    function hide() {
      svg.selectAll("*").remove()
    }

    function sort(data) {
      var x0 = y.domain(data.sort(false
              ? function(a, b) { return a.amount - b.amount; }
              : function(a, b) { return d3.ascending(parseInt(a.label), parseInt(b.label)); })
              .map(function(d) { return d.label; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };

      transition.selectAll(".bar")
          .delay(delay)
          .attr("y", function(d) { return x0(d.label); });

      transition.select(".y.axis")
          .call(yAxis)
        .selectAll("g")
          .delay(delay);
    }

    function get_history_data(data) {
      compare_years = []
      $.each( data, function( year, months ) {
        compare_years.push( { label: year, amount: months['0'] } )
      })
      return compare_years
    }

    function mouseclick(d) {
      if(d.label != current_year) {
        $("#slider_chart").find(".active_point").attr("class", " ").attr("stroke", "none");
        $(this).attr("class", "active_point");
        current_year = d.label;
        slider.show(center_node, current_month, current_year);
        chart.show("#{@taxonomy.id}", current_year, current_month);
      } else if(current_month != 0) {
        current_month = 0;
        $("#slider_compare").find("rect").css("fill-opacity", "0.5").css("fill", "#9ecae1");
        slider.set_month(0);
        chart.show("#{@taxonomy.id}", current_year, current_month);
      }
    }

    function mouseover(d) {

      d3.select(this)
        .attr("stroke", "#3182bd")
        .attr("cursor", "pointer")
        .attr("stroke-width", 2);
    }

    function mouseout(d) {
      if(d.label != current_year) {
        d3.select(this)
          .attr("stroke", "none");
      }
     }

    function get_month_by_num(month) {
      return #{I18n.t :abbr_month_names, :scope => :date}[month]
    }

    function show(data) {

      var k, y_label;
      var totalSize = d3.max(data, function(d) { return d.amount; });
      var maxLabel = d3.max(data, function(d) { return parseInt(d.label); });
      var minLabel = d3.min(data, function(d) { return parseInt(d.label); });
      if (totalSize >= 1000000000000) {k = 1000000000000; y_label = I18n.t("short_units.trillion");}
      else if (totalSize >= 1000000000) {k = 1000000000; y_label = I18n.t("short_units.billion");}
      else if (totalSize >= 1000000) {k = 1000000; y_label = I18n.t("short_units.million");}
      else if (totalSize >= 1000) {k = 1000; y_label = I18n.t("short_units.thousand");}
      else {k = 1; y_label = I18n.t("short_units.unit");}
      svg.selectAll("*").remove();

      var maxSize = totalSize/k;
      var minSize = d3.min(data, function(d) { return d.amount; })/k;

      if(#{@range}.length > 1) {
        x.domain([minLabel-1, maxLabel+1]);
      } else {
        var year = parseInt(#{@range}[0][0]);
        x.domain([year-1, year+1]);
        yAxis.ticks(2);
      }

      y.domain([minSize-minSize/4, maxSize]);
      size_scale.domain(d3.extent(data, function(d) { return d.amount/k; }));

      var line = d3.svg.line()
                .x(function(d) { return x(d.label); })
                .y(function(d) { return y(d.amount/k); });

      svg.append("path")
          .attr("class", "line")
          .attr("d", line(data))
          .attr("stroke", "#9ecae1")
          .attr("stroke-width", 1)
          .attr("fill", "none");

      svg.selectAll("dot")
        .data(data)
      .enter().append("circle")
        .attr("class", function(d) { return d.label == current_year ? "active_point" : ""; })
        .attr("r", function(d) { return size_scale(d.amount/k); })
        .attr("cx", function(d) { return x(d.label); })
        .attr("cy", function(d) { return y(d.amount/k); })
        .attr("fill", "#9ecae1")
        .on("mouseover", mouseover)
        .on("mouseout", mouseout)
        .on("click", mouseclick)
        .append("title")
           .text(function(d) {
                 return aVisify.helpers.formatNumber(d.amount);
           });;

      svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

      svg.append("g")
        .attr("class", "y axis")
        .attr("transform", "translate(0,0)")
        .call(yAxis);

      svg.append("text")
          .attr("x", -10)
          .attr("y", -10)
          .attr("text-anchor", "end")
          .attr("fill", "#888888")
          .text(y_label);

      //// Draw Y-axis grid lines
      //svg.selectAll("line.y")
      //  .data(y.ticks(2))
      //.enter().append("line")
      //  .attr("class", "y")
      //  .attr("x1", 0)
      //  .attr("x2", 450)
      //  .attr("y1", y)
      //  .attr("y2", y)
      //  .style("stroke", "#ccc")
      //  .style("stroke-width", 1);
    }

    return {
      initialize: function(pHeight) {
        var number_of_years = #{@range}.length;
        width = $(aContainer).width() - margin.left - margin.right,
        height = 50;

        size_scale = d3.scale.linear()
                       .range([6, 12]);

        x = d3.scale.linear()
          .range([0, width]);

        y = d3.scale.linear()
          .range([height, 0]);

        xAxis = d3.svg.axis()
          .scale(x)
          .ticks(number_of_years+2)
          .tickFormat(d3.format("d"))
          .orient("bottom");

        yAxis = d3.svg.axis()
          .scale(y)
          .ticks(number_of_years)
          .orient("left");

        svg = d3.select("#slider_chart").append("svg")
            .attr("width", width + 2*margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      },
      hide: hide,
      show: function(node, month, year) {
        if(!node.history) {
          hide();
          return;
        }
        center_node = node;
        data = get_history_data(node.history);

        if (data == null || data.length == 0){
          return;
        }
        current_month = month;
        current_year = year;
        show(data);
      },
      current_month: function() {
        return current_month;
      },
      set_month: function(month) {
        current_month = month;
      }
    }
  }
