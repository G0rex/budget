:css
  .axis text {
    font: 10px sans-serif;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: grey;
    stroke-width: 1;
    shape-rendering: crispEdges;
  }

  .bar {
    fill: steelblue;
    cursor: pointer;
  }

  #slider_chart .bartext {
    font-size: 0.6em;
  }

  label {
    position: absolute;
    top: 10px;
    right: 10px;
  }

#slider_chart.col-xs-4
-#%svg{:height => "200", :width => "500"}
-#  %polyline{:points => "20,20 40,25 60,40 80,120 120,140 200,180", :style => "fill:none;stroke:black;stroke-width:3"}

:javascript
  function aSliderChart(aContainer, slider) {
    var margin = {top: 20, right: 20, bottom: 30, left: 50},
        width, height;

    var x, y, xAxis, yAxis;

    var svg;

    var color;

    var data, center_node;

    var current_month = 0, current_year = 0;

    function delay(d, i) { return i * 10; }

    function hide() {
      $("#slider_chart").height(0)
      svg.selectAll("*").remove()
    }

    function sort(data) {
      var x0 = y.domain(data.sort(false
              ? function(a, b) { return a.amount - b.amount; }
              : function(a, b) { return d3.ascending(parseInt(a.label), parseInt(b.label)); })
              .map(function(d) { return d.label; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };

      transition.selectAll(".bar")
          .delay(delay)
          .attr("y", function(d) { return x0(d.label); });

      transition.select(".y.axis")
          .call(yAxis)
        .selectAll("g")
          .delay(delay);
    }

    function get_history_data(data) {
      compare_years = []
      $.each( data, function( year, months ) {
        compare_years.push( { label: year, amount: months['0'] } )
      })
      return compare_years
    }

    function mouseclick(d) {
      if(d.label != current_year) {
        $("#slider_chart").find("rect").css("fill", "#9ecae1");
        $(this).css("fill", "#3182bd");
        current_year = d.label;
        slider.show(center_node, current_month, current_year);
        chart.show(current_year, current_month);
      } else if(current_month != 0) {
        current_month = 0;
        $("#slider_compare").find("rect").css("fill-opacity", "0.5").css("fill", "#9ecae1");
        slider.set_month(0);
        chart.show(current_year, current_month);
      }
    }

    function mouseover(d) {
      $(this).css("fill", "#3182bd");
    }

    function mouseout(d) {
      if(d.label != current_year) {
        $(this).css("fill", "#9ecae1");
      }
    }

    function get_month_by_num(month) {
      return #{I18n.t :abbr_month_names, :scope => :date}[month]
    }

    function show(data) {

      //sort(data);

      //svg.selectAll("*").remove();
      //$("#slider_chart").height(height + margin.top + margin.bottom);

      //x.domain([years[0]-1, years[years.length-1]+1]);
      //y.domain([map[0], map[map.length-1]]);

      x.domain(data.map(function(d) { return d.label; }));
      y.domain([0, d3.max(data, function(d) { return d.amount; })]);

      //svg.append("text")
      //   .attr("text-anchor", "end")
      //   .attr("y", -10)
      //   .text(y_label);

      var line = d3.svg.line()
                .x(function(d) { return x(d.label); })
                .y(function(d) { return y(d.amount); });

      svg.append("path")
          .attr("class", "line")
          .attr("d", line(data))
          .attr("stroke", "blue")
          .attr("stroke-width", 2)
          .attr("fill", "none");;

      svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

      svg.append("g")
        .attr("class", "y axis")
        .attr("transform", "translate(0,0)")
        .call(yAxis);

      //svg.selectAll(".bar")
      //    .data(data)
      //  .enter().append("rect")
      //    .attr("class", "bar")
      //    .style("fill", function(d) { return d.label == current_year ? "#3182bd" : "#9ecae1"; })
      //    .attr("x", 0)
      //    .attr("width", 0)
      //    .attr("y", function(d) { return y(d.label); })
      //    .attr("height", y.rangeBand())
      //    .on("mouseover", mouseover)
      //    .on("mouseout", mouseout)
      //    .on("click", mouseclick);
      //
      //svg.selectAll(".bartext")
      //  .data(data)
      //.enter().append("text")
      //  .attr("class", "bartext")
      //  .attr("text-anchor", "end")
      //  .text(function(d) { return aVisify.helpers.formatNumber(d.amount); })
      //
      //svg.transition().duration(250).selectAll(".bar")
      //    .delay(delay)
      //    .attr("width", function(d) { return x(d.amount); })
      //
      //svg.transition().duration(250).selectAll(".bartext")
      //  .attr("y", function(d) { return (y(d.label)+margin.top); })
      //  .attr("x", function(d) { return (x(d.amount)+margin.left); })
    }

    return {
      initialize: function(pHeight) {
        var number_of_years = #{@range}.length;
        width = $(aContainer).width() - margin.left - margin.right,
        height = 250;

        x = d3.scale.linear()
          .range([0, width]);

        y = d3.scale.linear()
          .range([height, 0]);

        xAxis = d3.svg.axis()
          .scale(x)
          .ticks(number_of_years+2)
          .tickFormat(d3.format("d"))
          .orient("bottom");

        yAxis = d3.svg.axis()
          .scale(y)
          .ticks(number_of_years)
          .orient("left");

        svg = d3.select("#slider_chart").append("svg")
            .attr("width", width + 2*margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      },
      hide: hide,
      show: function(node, month, year) {
        if(!node.history) {
          hide();
          return;
        }
        center_node = node;
        data = get_history_data(node.history);

        if (data == null || data.length == 0){
          return;
        }
        current_month = month;
        current_year = year;
        show(data);
      },
      current_month: function() {
        return current_month;
      },
      set_month: function(month) {
        current_month = month;
      }
    }
  }
