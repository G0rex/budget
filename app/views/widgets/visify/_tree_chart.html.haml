.visify
  = render partial: 'sequence', :locals => { budget_file_id: budget_file_id }
  #under_sequence
  = render partial: 'sidebar', :locals => { budget_file_id: budget_file_id }

  .col-xs-8
    #chart
    %canvas{:style => "display: none;"}
    .slider.col-xs-offset-1.col-xs-10
      = render partial: 'slider'

:javascript
  aVisify = {
    helpers: {
      getPercentageString: function (d, totalSize) {
        var percentage = (100 * d.amount/ totalSize).toPrecision(3);
        var percentageString = percentage + "%";
        if (percentage < 0.1) {
          percentageString = "< 0.1%";
        }
        return percentageString;
      },
      formatNumber: function (n) {
        var prefix = '';
        if (n < 0) {
            n = n*-1;
            prefix = '-';
        }
        if (n >= 1000000000000) return prefix+Math.round(n / 100000000000)/10 + I18n.t("short_units.trillion");
        if (n >= 1000000000) return prefix+Math.round(n / 100000000)/10 + I18n.t("short_units.billion");
        if (n >= 1000000) return prefix+Math.round(n / 100000)/10 + I18n.t("short_units.million");
        if (n >= 1000) return prefix+Math.round(n / 100)/10 + I18n.t("short_units.thousand");
        else return prefix+n;
      },

      wrap: function (text, width) {
        text.each(function() {
            var text = d3.select(this),
                words = text.text().split(/\s+/).reverse(),
                word,
                line = [],
                lineNumber = 0,
                lineHeight = 1.1, // ems
                y = text.attr('y'),
                dy = parseFloat(text.attr('dy')),
                tspan = text.text(null).append("tspan").attr("x", 15).attr("y", y);
            var lines = [tspan];
            while ((word = words.pop()) && (lines.length < 4)) {
                line.push(word);
                tspan.text(line.join(" "));
                if (tspan.node().getComputedTextLength() > width) {
                    line.pop();
                    tspan.text(line.join(" "));
                    line = [word];
                    tspan = text.append("tspan").attr("x", 15).attr("y", y).text(word);
                    lines.push(tspan);
                }
            }
            if (lines.length == 1) {
                lines[0].attr("y", 22);
            }
            if (lines.length == 2) {
                lines[0].attr("y", 15);
                lines[1].attr("y", 35);
            }
            if (lines.length > 2) {
                lines[0].attr("y", 9);
                lines[1].attr("y", 27);
                lines[2].attr("y", 40);
            }
            if (lines.length == 4){
                lines[3].remove();
            }
        })
      }
    }
  }

  $(document).ready(function() {
    var width = $(document).width() - $('.visify #sidebar').width() - 50;
    height = $(document).height()

    var sequence = aSequence('.visify')
    sequence.initializeBreadcrumbTrail();

    var sidebar = aSidebar('.visify')
    sidebar.initialize(height - 140);

    chart = aTreeChart('.visify', sequence, sidebar)
    chart.initialize(width, height - 250);
    chart.show("#{@sel_year}", "#{@sel_month}")

    var slider = aSlider('.visify', chart)
    slider.initialize()

  });
