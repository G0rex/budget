#sequence

:javascript

  function aSequence(aContainer) {
    var b = {
          w: 240, h: 45, s: 3, t: 10
        }


    return {
      // Given a node in a partition layout, return an array of all of its ancestor
      // nodes, highest first, but excluding the root.
      container: aContainer,

      getAncestors: function(node) {
        var path = [];
        var current = node;
        while (current.parent) {
          path.unshift(current);
          current = current.parent;
        }
        return path;
      },

      initializeBreadcrumbTrail: function() {
        // Add the svg area.
        var trail = d3.select(aContainer + " #sequence").append("svg:svg")
            .attr("width", '100%')
            .attr("height", 50)
            .attr("id", "trail");
        // Add the label at the end, for the percentage.
        trail.append("svg:text")
          .attr("id", "endlabel")
          .style("fill", "#000");
      },

      // Generate a string that describes the points of a breadcrumb polygon.
      breadcrumbPoints: function(d, i) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        points = []
        points.push("0,0");
        points.push(b.w + ",0");
        points.push(b.w + b.t + "," + (b.h / 2));
        points.push(b.w + "," + b.h);
        points.push("0," + b.h);
        if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.
          points.push(b.t + "," + (b.h / 2));
        }
        //this.points = points
        return points.join(" ");
      },

      // Update the breadcrumb trail to show the current sequence and percentage.
      updateBreadcrumbs: function(nodeArray, percentageString) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        // Data join; key function combines name and depth (= position in sequence).
        var g = d3.select(aContainer + " #trail")
            .selectAll("g")
            .data(nodeArray, function(d) { return d.label + (d.depth || d.level); });

        // Add breadcrumb and label for entering nodes.
        var entering = g.enter().append("svg:g");

        entering.append("svg:polygon")
            .attr("points", this.breadcrumbPoints)
            .style("fill", function(d) { return d.color || color(d.label); })

        entering.append("svg:text")
            .attr("x", 0)
            .attr("y", 10)
            .attr("dy", "0.35em")
            .attr("text-anchor", "cent")
            .text(function(d) { return d.label; })
            .call(aVisify.helpers.wrap, b.w - 20)

        // Set position for entering and updating nodes.
        g.attr("transform", function(d, i) {
          return "translate(" + i * (b.w + b.s) + ", 0)";
        });

        // Remove exiting nodes.
        g.exit().remove();

        // Now move and update the percentage at the end.
        d3.select(aContainer + " #trail").select("#endlabel")
            .attr("x", (nodeArray.length + 0.5) * (b.w + b.s))
            .attr("y", b.h / 2)
            .attr("dy", "0.35em")
            .attr("text-anchor", "middle")
            .text(percentageString);

        // Make the breadcrumb trail visible, if it's hidden.
        d3.select(aContainer + " #trail")
            .style("visibility", "");
      },

      // Hide the breadcrumb trail
      hideBreadcrumb: function() {
        d3.select(aContainer + " #trail")
            .style("visibility", "hidden");
      },

      getPercentageString: function(d, totalSize) {
        var percentage = (100 * d.amount / totalSize).toPrecision(3);
        var percentageString = percentage + "%";
        if (percentage < 0.1) {
          percentageString = "< 0.1%";
        }
        return percentageString;
      }
    }
  }