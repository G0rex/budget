-# http://redotheweb.com/CodeFlower/

= javascript_include_tag "d3.geom.js"

.collapsible
  #sidebar.col-xs-3
  #chart

:javascript

  $(document).ready(function() {

    var w = $(document).width() - $('#sidebar').width() - 50,
        h = $(document).height() - 120,
        node,
        link,
        root;

    var tooltip = d3.select(".collapsible").append("div")
        .attr("id", "tooltip")
        .style("opacity", 0);

    var totalSize

    $('.collapsible #chart').width(w).height(h)

    var force = d3.layout.force()
        .on("tick", tick)
        .charge(function(d) { return -90; })
        .linkDistance(function(d) { return d.target._children ? 80 : 20; })
        .size([w, h - 100]);

    var vis = d3.select(".collapsible #chart").append("svg:svg")
        .attr("width", w)
        .attr("height", h);

    d3.json("/visify/get_sunburst_data/#{budget_file_id}", function(json) {
      root = json;
      root.fixed = true;
      root.x = w / 2;
      root.y = h / 2 - 80;

      update();

      totalSize = root.size;
    });

    function update() {
      var nodes = flatten(root),
          links = d3.layout.tree().links(nodes);

      // Restart the force layout.
      force
          .nodes(nodes)
          .links(links)
          .start();

      // Update the links…
      link = vis.selectAll("line.link")
          .data(links, function(d) { return d.target.id; });

      // Enter any new links.
      link.enter().insert("svg:line", ".node")
          .attr("class", "link")
          .attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      // Exit any old links.
      link.exit().remove();

      // Update the nodes…
      node = vis.selectAll("circle.node")
          .data(nodes, function(d) { return d.id; })
          .style("fill", color);

      node.transition()
          .attr("r", function(d) { size = Math.sqrt(d.size) / 1500; return size < 5 ? 5 : size; });

      // Enter any new nodes.
      node.enter().append("svg:circle")
          .attr("class", "node")
          .attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; })
          .attr("r", function(d) { size = Math.sqrt(d.size) / 1500; return size < 5 ? 5 : size; })
          .style("fill", color)
          .on("click", click)
          .on("dblclick", dblclick)

          .on("mouseover", function(d) {
            tooltip.html(getTooltipHtml(d))
             .style("left", (d3.event.pageX) + "px")
             .style("top", (d3.event.pageY) + "px");
            tooltip.transition()
             .duration(200)
             .style("opacity", .9)
          })
          .on("mouseout", function(d) {
             tooltip.transition()
               .duration(200)
               .style("opacity", 0);
          })


          .call(force.drag);

      // Exit any old nodes.
      node.exit().remove();
    }

    function tick() {
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });
    }

    // Color leaf nodes orange, and packages white or blue.
    function color(d) {
      return d.color
      //return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
    }

    // Toggle children on click.
    function click(d) {
      $('.collapsible #sidebar').html(getItemInfoHtml(d))

      //if (d.children) {
      //  d._children = d.children;
      //  d.children = null;
      //} else {
      //  d.children = d._children;
      //  d._children = null;
      //}
      //update();
    }

    function dblclick(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
      update();
    }

    // Returns a list of all nodes under the root.
    function flatten(root) {
      var nodes = [], i = 0;

      function recurse(node) {
        if (node.children) node.size = node.children.reduce(function(p, v) { return p + recurse(v); }, 0);
        if (!node.id) node.id = ++i;
        nodes.push(node);
        return node.size;
      }

      root.size = recurse(root);
      return nodes;
    }



    function getItemInfoHtml(node) {
      percentage = (100 * node.size / totalSize).toPrecision(3);
      label = node.label || ''
      div = "<h3>" + label + "</h3>"
        + "<h3 class='percentage'>" + percentage + "%</h3>"
        + "<h4 class='amount'>" + node.size.toLocaleString() + " грн</h4>"

      if (node.description) {
        div = div + "<hr/>" +  "<div class='description'>" + node.description + "</div>"
      }

      return div
    }

    function getTooltipHtml(node) {
      percentage = (100 * node.size / totalSize).toPrecision(3);
      label = node.label || ''
      div = "<h3 class='percentage'>" + percentage + "% </h3> <h5> " + node.size.toLocaleString() + " грн</h5>"
        + "<hr/>"
        + "<div>" + label + "</div>"

      return div
    }
  });
