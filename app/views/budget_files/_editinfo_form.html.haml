:css
  .colorpicker.dropdown-menu.colorpicker-with-alpha.colorpicker-right.colorpicker-visible {
    background-color: #ffffff;
  }

= bootstrap_form_for @budget_file, :html => { 'accept-charset' => "UTF-8", :class => 'form-vertical' } do |f|
  .form-group
    = f.text_field :title, :label => t('budget_file_title')

  .form-group
    = f.select :data_type, options_for_select( [nil, :plan, :fact], @budget_file.data_type), class: 'select-town form-control'

  %hr
    %ul.nav.nav-tabs{role: 'tablist'}
      - @budget_file.taxonomy.columns.each do |key, val|
        %li
          %a{href: "#taxonnomy_#{val[:level]}", role: 'tab', 'data-toggle' => 'tab'}
            =val[:title]

    .tab-content
      - @budget_file.taxonomy.columns.each do |key, val|
        .tab-pane.fade.in{ :id => "taxonnomy_#{val[:level]}" }

          %table.table.table-striped.table-hover
            %tr
              %th{ :style => 'text-align: right'}
                =key
              %th
                = t('.name')
              %th
                = t('.icon')
              %th
                = t('.color')
              %th
                = t('.description')

            - unless @budget_file.taxonomy.explanation[key].nil?
              - @budget_file.taxonomy.explanation[key].keys.sort_by { |item| item }.each do |t_key|
                %tr
                  %td{style:'text-align: right'}
                    %h4=t_key
                  %td
                    %input{name: "taxonomy[#{CGI.escape key}][#{CGI.escape t_key}][title]", value: @budget_file.taxonomy.explanation[key][t_key]['title'] }
                  %td
                    -#= select_tag "taxonomy[#{CGI.escape key}][#{CGI.escape t_key}][icon]", options_for_select(fa_icon_list, @budget_file.taxonomy.explanation[key][t_key]['icon']), class: 'fa-select'
                    = select_tag "taxonomy[#{CGI.escape key}][#{CGI.escape t_key}][icon]", options_for_select([@budget_file.taxonomy.explanation[key][t_key]['icon']], @budget_file.taxonomy.explanation[key][t_key]['icon']), class: 'fa-select', :include_blank => true
                  %td
                    -#= select_tag "taxonomy[#{CGI.escape key}][#{CGI.escape t_key}][color]", options_for_select([@budget_file.taxonomy.explanation[key][t_key]['color']], @budget_file.taxonomy.explanation[key][t_key]['color']), class: 'color-select', :include_blank => true
                    .input-group.color-select
                      %input{name: "taxonomy[#{CGI.escape key}][#{CGI.escape t_key}][color]", value: @budget_file.taxonomy.explanation[key][t_key]['color'] }
                      %span.input-group-addon
                        %i
                  %td
                    %textarea{name: "taxonomy[#{CGI.escape key}][#{CGI.escape t_key}][description]", cols: 80, rows: 3}
                      = @budget_file.taxonomy.explanation[key][t_key]['description']

  %hr
  = f.submit t('budget_file_save'), :class => 'btn btn-primary'
  = link_to t('form.cancel', :default => t("helpers.links.cancel")), budget_files_path, :class => 'btn btn-default'

:javascript

  var icons, colors = "";

  /* Loading colors and icons once while loading the page.*/
  if(icons == "" || colors == "") {
    $.getJSON( "#{asset_path('enums.json') }", function( data ) {
      $.each( data['fa_icon_list'], function(key,val) {
        icons = icons + "<option value='" + val + "'>" + val + "</option>";
      })
      $.each( data['undp_colors_list'], function(key,val) {
        colors = colors + "<option value='" + val + "'>" + val + "</option>";
      })
    });
  }

  $(document).on('ready page:change', function() {

    /* Using icons on a page */
    $(".fa-select").select2(
      {
        allowClear: true,
        formatResult: formatFaSelect,
        formatSelection: formatFaSelect,
        escapeMarkup: function(m) { return m; }
      }
    ).on("select2-focus", function() {
      if(!$(this).hasClass('icon-loaded')){
        $(this).append(icons).addClass('icon-loaded');
      }
      });

    function formatFaSelect(el) {
      return "<i class='fa " + el.id + "'/> " + el.id;
    }

    /* Using colors on a page */
    $(".color-select").colorpicker()
    //$(".color-select").select2(
    //  {
    //    allowClear: true,
    //    formatResult: formatColorSelect,
    //    formatSelection: formatColorSelect,
    //    escapeMarkup: function(m) { return m; }
    //  }
    //).on("select2-focus", function() {
    //  if(!$(this).hasClass('color-loaded')){
    //    $(this).append(colors).addClass('color-loaded');
    //  }
    //});

    function formatColorSelect(el) {
      //console.log(el.id);
      return "<div style='width: 100%; height: 43px; background-color: " + el.id + "'/>";
    }
  });

