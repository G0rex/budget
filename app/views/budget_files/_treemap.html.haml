.treemap
  #sidebar
  #chart

:javascript

  $(document).ready(function() {
    var w = $('body').width() - 340,
        h = w*0.4,
        x = d3.scale.linear().range([0, w]),
        y = d3.scale.linear().range([0, h]),
        color = d3.scale.category20c(),
        root,
        node;

    var tooltip = d3.select(".treemap").append("div")
        .attr("id", "tooltip")
        .style("opacity", 0);

    var totalSize = 0;


    var treemap = d3.layout.treemap()
        .round(false)
        .size([w, h])
        .sticky(true)
        .value(function(d) { return d.amount; });

    var svg = d3.select(".treemap #chart")
        .style("width", w + "px")
        .style("height", h + "px")
      .append("svg:svg")
        .attr("width", w - 20)
        .attr("height", h)
      .append("svg:g")
        .attr("transform", "translate(.5,.5)");

    d3.json("/budget_files/get_sunburst_data/#{budget_file_id}", function(data) {
      node = root = data;

      var nodes = treemap.nodes(root)
          .filter(function(d) { return !d.children; });

      var cell = svg.selectAll("g")
          .data(nodes)
          .enter().append("svg:g")
          .attr("class", "cell")
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
          .on("click", function(d) {
            $('.treemap #sidebar').html(getItemInfoHtml(d))
            return zoom(node == d.parent ? root : d.parent);
          })
          .on("mouseover", function(d) {
            if(d.title == '')
              return

            tooltip.html(getTooltipHtml(d))
             .style("left", (d3.event.pageX) + "px")
             .style("top", (d3.event.pageY) + "px");
            tooltip.transition()
             .duration(200)
             .style("opacity", .8)
          })
          .on("mouseout", function(d) {
             tooltip.transition()
               .duration(200)
               .style("opacity", 0);
          })


      cell.append("svg:rect")
          .attr("width", function(d) { return d.dx - 1; })
          .attr("height", function(d) { return d.dy - 1; })
          .style("fill", function(d) { return color(d.parent.name); });

      cell.append("svg:text")
          .attr("x", function(d) { return d.dx / 2; })
          .attr("y", function(d) { return d.dy / 2; })
          .attr("dy", ".35em")
          .attr("text-anchor", "middle")
          .text(function(d) { return d.name; })
          .style("opacity", function(d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });


      totalSize = cell.node().__data__.value

      d3.select(window).on("click", function() { zoom(root); });

      d3.select("select").on("change", function() {
        treemap.value(this.value == "size" ? size : count).nodes(root);
        zoom(node);
      });
    });

    function size(d) {
      return d.amount;
    }

    function count(d) {
      return 1;
    }

    function zoom(d) {
      var kx = w / d.dx, ky = h / d.dy;
      x.domain([d.x, d.x + d.dx]);
      y.domain([d.y, d.y + d.dy]);

      var t = svg.selectAll("g.cell").transition()
          .duration(d3.event.altKey ? 7500 : 750)
          .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

      t.select("rect")
          .attr("width", function(d) { return kx * d.dx - 1; })
          .attr("height", function(d) { return ky * d.dy - 1; })

      t.select("text")
          .attr("x", function(d) { return kx * d.dx / 2; })
          .attr("y", function(d) { return ky * d.dy / 2; })
          .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

      node = d;
      d3.event.stopPropagation();
    }

    function getItemInfoHtml(node) {
      percentage = (100 * node.value / totalSize).toPrecision(3);
      title = node.title || ''
      name = node.name || ''
      div = "<h4 class='code'>" + name + "</h4>"
        + "<div class='title'>" + title + "</div>"
        + "<h3 class='percentage'>" + percentage + "%</h3>"
        + "<h4 class='amount'>" + node.value.toLocaleString() + " грн</h4>"

      if (node.description) {
        div = div + "<hr/>" +  "<div class='description'>" + node.description + "</div>"
      }

      return div
    }

    function getTooltipHtml(node) {
      percentage = (100 * node.value / totalSize).toPrecision(3);
      title = node.title || ''
      div = "<h5 class='percentage'>" + percentage + "% - " + node.value.toLocaleString() + " грн</h5>"
        + "<hr/>"
        + "<div class='title'>" + title + "</div>"


      return div
    }
  });
