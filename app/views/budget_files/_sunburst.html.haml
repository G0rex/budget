.sunburst
  #sidebar.col-xs-3
  #chart
    = render partial: 'budget_files/sequence', :locals => { budget_file_id: @revenue.id }

:javascript
  $(document).ready(function() {
    // Dimensions of sunburst.
    var width = $('.budget').width() - $('.bubbletree #sidebar').width() - 50;
    var height = width * 0.5;
    var radius = Math.min(width, height) / 2;

    var sequence = aSequence('.sunburst')

    var tooltip = d3.select(".sunburst").append("div")
        .attr("id", "tooltip")
        .style("opacity", 0);

    var totalSize = 0;

    $(".sunburst #chart").width(width).height(height + 40)

    color = d3.scale.category20c();

    var partition = d3.layout.partition()
        .size([2 * Math.PI, radius])
        .value(function(d) { return d.size; });

    var arc = d3.svg.arc()
        .startAngle(function(d) { return d.x; })
        .endAngle(function(d) { return d.x + d.dx; })
        .innerRadius(function(d) { return d.y; })
        .outerRadius(function(d) { return d.y + d.dy; });

    var svg = d3.select(".sunburst #chart").append("svg:svg")
        .attr("width", width)
        .attr("height", height)
        .append("svg:g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    d3.json("/budget_files/get_sunburst_data/#{budget_file_id}", function(root) {
      path = svg.data([root]).selectAll("path")
          .data(partition.nodes)
          .enter().append("svg:path")
          .attr("d", arc)
          .style("fill", function(d) { return color((d.children ? d : d.parent).value); })
          .on("click", function(d) {
            $('.sunburst #sidebar').html(getItemInfoHtml(d))
            magnify(d)
          })
          .on("mouseover", function(d) {
            if(d.title == '')
              return

            var sequenceArray = sequence.getAncestors(d);
            sequence.updateBreadcrumbs(sequenceArray, sequence.getPercentageString(d, totalSize));

            tooltip.html(getTooltipHtml(d))
             .style("left", (d3.event.pageX) + "px")
             .style("top", (d3.event.pageY) + "px");
            tooltip.transition()
             .duration(200)
             .style("opacity", .9)
          })
          .on("mouseout", function(d) {
             sequence.hideBreadcrumb()
             tooltip.transition()
               .duration(200)
               .style("opacity", 0);
          })
          .each(stash);

      totalSize = path.node().__data__.value

      sequence.initializeBreadcrumbTrail();
    });

    // Distort the specified node to 80% of its parent.
    function magnify(node) {
      if (parent = node.parent) {
        var parent,
            x = parent.x,
            k = .8;
        parent.children.forEach(function(sibling) {
          x += reposition(sibling, x, sibling === node
              ? parent.dx * k / node.value
              : parent.dx * (1 - k) / (parent.value - node.value));
        });
      } else {
        reposition(node, 0, node.dx / node.value);
      }

      path.transition()
          .duration(750)
          .attrTween("d", arcTween);
    }

    // Recursively reposition the node at position x with scale k.
    function reposition(node, x, k) {
      node.x = x;
      if (node.children && (n = node.children.length)) {
        var i = -1, n;
        while (++i < n) x += reposition(node.children[i], x, k);
      }
      return node.dx = node.value * k;
    }

    // Stash the old values for transition.
    function stash(d) {
      d.x0 = d.x;
      d.dx0 = d.dx;
    }

    // Interpolate the arcs in data space.
    function arcTween(a) {
      var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
      return function(t) {
        var b = i(t);
        a.x0 = b.x;
        a.dx0 = b.dx;
        return arc(b);
      };
    }


    function getItemInfoHtml(node) {
      percentage = (100 * node.value / totalSize).toPrecision(3);
      title = node.title || ''
      name = node.name || ''
      div = "<h4 class='code'>" + name + "</h4>"
        + "<div class='title'>" + title + "</div>"
        + "<h3 class='percentage'>" + percentage + "%</h3>"
        + "<h4 class='amount'>" + node.value.toLocaleString() + " грн</h4>"

      if (node.description) {
        div = div + "<hr/>" +  "<div class='description'>" + node.description + "</div>"
      }

      return div
    }

    function getTooltipHtml(node) {
      percentage = (100 * node.value / totalSize).toPrecision(3);
      title = node.title || ''
      div = "<h5 class='percentage'>" + percentage + "% - " + node.value.toLocaleString() + " грн</h5>"
        + "<hr/>"
        + "<div class='title'>" + title + "</div>"


      return div
    }

  });
