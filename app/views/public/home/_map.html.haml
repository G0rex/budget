-# http://geojson.org/geojson-spec.html#examples
-# http://www.rubydoc.info/gems/rgeo-geojson/frames
-# https://github.com/alexreisner/geocoder
-# http://railscasts.com/episodes/273-geocoder

= stylesheet_link_tag 'leaflet/leaflet.css', :media => 'all'
= stylesheet_link_tag 'leaflet/markercluster.default.css', :media => 'all'
= stylesheet_link_tag 'leaflet/markercluster.css', :media => 'all'

= javascript_include_tag "leaflet/leaflet.js"
= javascript_include_tag "leaflet/geojson-tiles.js"
= javascript_include_tag "leaflet/markercluster.js"
= javascript_include_tag "leaflet/zoomfs.js"
= javascript_include_tag "leaflet/leaflet-routing-machine.js"


:css
  #map {
    width: 100%;
    height: 100%;
  }

  .info {
    width: 100%;
    height: auto;
    padding: 10px;
    background: white;
    opacity: .9;
    background: rgba(255,255,255,0.8);
    box-shadow: 0 0 15px rgba(0,0,0,0.2);
    border-radius: 5px;
  }
  .info .title {
    /*margin: 0 0 5px;*/
    color: #777;
  }




#map


:javascript

  var RepairMap

  $(document).ready(function() {
    RepairMap = function(options) {
      options = options || {}

      var map;
      var popup;
      var router;
      var info;

      var self = this;

      function initMap() {
        var mapSettings = { }
        if (options.scrollWheelZoom)
          mapSettings.scrollWheelZoom = options.scrollWheelZoom

        map = L.map('map', mapSettings)

        var layerSettings = {
          attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>',
          id: 'begemot.mbl2go4k',
          accessToken: 'pk.eyJ1IjoiYmVnZW1vdCIsImEiOiJlMjk1ODk0MDIzOTgxODUxNzFjNDk5YTBhNGNmNjQ3YyJ9.N5HyCJcDWeQGJcqCl1nHVQ'
        }
        if (options.minZoom)
          layerSettings.minZoom = options.minZoom
        if (options.maxZoom)
          layerSettings.maxZoom = options.maxZoom

        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', layerSettings).addTo(map);


        if (options.bounds) map.fitBounds(options.bounds);


        if (options.center)
          map.setView(options.center, options.zoom)
        else
          setBrowserLocation()

        L.Icon.Default.imagePath = '/assets/leaflet/images'

        function getBrowserLocation() {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(positionSuccess, positionError, { enableHighAccuracy: true });
          } else {
            // unsupported
          }

          function positionSuccess(position) {
            var lat = position.coords.latitude;
            var lng = position.coords.longitude;
            var acr = position.coords.accuracy;

            map.setView([lat, lon], options.zoom)
          }
          function positionError(err) {
          }
        }
      }

      function initRouting() {
        // routing machine
        router = L.Routing.osrm()
      }


      function addGeoJsonAreas(url, options) {
        options = options || {}

        var layerOptions = {
          //hoverOffset: new L.Point(30,-16),
          onEachFeature: onEachFeature
        }
        if (options.style)
          layerOptions.style = options.style
        if (options.hoverStyle)
          layerOptions.hoverStyle = options.hoverStyle


        var areasLayer = new L.GeoJSON(null, layerOptions);
        map.addLayer(areasLayer);

        // Add GeoJSON loader layer.
        var geojson = new L.TileLayer.GeoJSON(url)
          .on('load', function() {
            areasLayer.clearLayers().addData(geojson.geojson());
          });
        map.addLayer(geojson);

        function onEachFeature(feature, layer) {
          if (options.getPopupContent) layer.bindPopup( options.getPopupContent(feature.properties) );

          layer.on('mouseover', function() {
            if (options.hoverStyle) layer.setStyle(options.hoverStyle);

            if (options.getInfoContent)
              info.update(options.getInfoContent(feature.properties));
          });
          layer.on('mouseout', function() {
            if (options.style) layer.setStyle(options.style);
            info.update();
          });
        }
      }


      function addGeoJsonPoints(data, getPoint, options) {
        options = options || {}

        var markers = (options.clustered == true) ? new L.MarkerClusterGroup() : new L.layerGroup();
        map.addLayer(markers);

        var layerOptions = {
          pointToLayer: getPointToLayer,
          onEachFeature: onEachFeature,
          coordsToLatLng: coordsToLatLng,
        }
        if (options.style)
          layerOptions.style = options.style
        if (options.hoverStyle)
          layerOptions.hoverStyle = options.hoverStyle

        geoJson = L.geoJson(data, layerOptions).addTo(markers);


        function coordsToLatLng(coords) {
          map.panTo(L.latLng(coords))
          return L.latLng(coords)
        }

        function getPointToLayer(feature, latlng) {
          var icon = getPoint(feature.properties)

          return L.marker(latlng, {
            icon: icon,
            opacity: 1,
            draggable: false,
          });
        }

        function onEachFeature(feature, layer) {
          if (options.getPopupContent) layer.bindPopup( options.getPopupContent(feature.properties) );

          layer.on({
            mouseover: function () {
              //layer.setStyle(options.hoverStyle);
              if (options.getInfoContent)
                info.update(options.getInfoContent(feature.properties));
            },
            mouseout: function () {
              //geoJson.resetStyle(layer)
              info.update();
            }
          });
        }
      }

      function addControl() {
        info = L.control();

        info.onAdd = function (map) {
          this._div = L.DomUtil.create('div', 'info');
          this.update();
          return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        info.update = function (content) {
          if (content)
            this._div.innerHTML = content
          else
            this._div.innerHTML = 'Наведіть курсор на об’єкт на мапі для відображення деталей'
          };

        info.addTo(map);
      }

      initMap()
      initRouting()
      addControl()

      return {
        map: map,
        addGeoJsonAreas: addGeoJsonAreas,
        addGeoJsonPoints: addGeoJsonPoints,
      }
    }

  });
