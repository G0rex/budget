-# http://geojson.org/geojson-spec.html#examples
-# http://www.rubydoc.info/gems/rgeo-geojson/frames
-# https://github.com/alexreisner/geocoder
-# http://railscasts.com/episodes/273-geocoder

= stylesheet_link_tag 'leaflet/leaflet.css', :media => 'all'
= stylesheet_link_tag 'leaflet/markercluster.default.css', :media => 'all'
= stylesheet_link_tag 'leaflet/markercluster.css', :media => 'all'

= javascript_include_tag "leaflet/leaflet.js"
= javascript_include_tag "leaflet/markercluster.js"
= javascript_include_tag "leaflet/zoomfs.js"
= javascript_include_tag "leaflet/leaflet-routing-machine.js"


:css
  #map {
    width: 100%;
    height: 100%;
  }

  .info {
    width: 100%;
    height: auto;
    padding: 10px;
    background: white;
    opacity: .9;
    background: rgba(255,255,255,0.8);
    box-shadow: 0 0 15px rgba(0,0,0,0.2);
    border-radius: 5px;
  }
  .info .title {
    /*margin: 0 0 5px;*/
    color: #777;
  }




#map


:javascript

  var RepairMap

  $(document).ready(function() {
    RepairMap = function(options) {

      var map, markers, markersGrouped;
      var popup;
      var router;
      var info;

      var self = this;

      function initMap() {
        map = L.map('map', { zoomControl:false, scrollWheelZoom : false })

        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
          attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>',
          maxZoom: 22,
          id: 'begemot.mbl2go4k',
          accessToken: 'pk.eyJ1IjoiYmVnZW1vdCIsImEiOiJlMjk1ODk0MDIzOTgxODUxNzFjNDk5YTBhNGNmNjQ3YyJ9.N5HyCJcDWeQGJcqCl1nHVQ'
        }).addTo(map);

        L.Icon.Default.imagePath = '/assets/leaflet/images'


        initZoomFS()

        getBrowserLocation()


        markers = new L.layerGroup();
        markersGrouped = new L.MarkerClusterGroup();

        map.addLayer(markers);
        map.addLayer(markersGrouped);

        function getBrowserLocation() {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(positionSuccess, positionError, { enableHighAccuracy: true });
          } else {
            $(".map").text("Your browser is out of fashion, there\'s no geolocation!");
          }

          function positionSuccess(position) {
            var lat = position.coords.latitude;
            var lng = position.coords.longitude;
            var acr = position.coords.accuracy;

            map.setView([lat, lng], 7)
          }
          function positionError(err) {
            map.setView([50.38751, 30.68481], 7)
          }

        }

        function initZoomFS() {
          var zoomFS = new L.Control.ZoomFS({position : 'bottomleft'});
          map.addControl(zoomFS);
          map.on('enterFullscreen', function() {
            $('#my-box').css({
             'position' : "fixed",
             "top" : "40px",
             "left" : "0px"
            })
          });
          map.on('exitFullscreen', function() {
            $('#my-box').css({
             'position' : "absolute",
             "top" : "0px"
            })
          });
        }

      }

      function initRouting() {
        // routing machine
        router = L.Routing.osrm()
      }


      // add markers
      var AreaIcon = L.Icon.extend({
        options: {
          iconSize: [64, 64],
        }
      });

      var CityIcon = L.Icon.extend({
        options: {
          iconSize: [32, 32],
        }
      });

      var TownIcon = L.Icon.extend({
        options: {
          iconSize: [32, 32],
        }
      });

      var iconArea = new AreaIcon({iconUrl: '/assets/map/iconArea.png'})
      var iconCity = new CityIcon({iconUrl: '/assets/map/iconCity.png'})
      var iconTown = new TownIcon({iconUrl: '/assets/map/iconTown.png'})

      function addGeoJson(data, isClustered) {

        L.geoJson(data, {
          pointToLayer: getPointToLayer,
          style: getFeatureStyle,
          onEachFeature: onEachFeature,
          coordsToLatLng: coordsToLatLng,
          lineCap: 'round',
        }).addTo(isClustered ? markersGrouped : markers);


        function getPointToLayer(feature, latlng) {
          var icon, opacity = 1
          switch (feature.properties.level) {
            case 'area':
              icon = iconArea
              opacity = .6
              break
            case 'city':
              icon = iconCity
              break
            case 'town':
              icon = iconTown
              break
            default:
              icon = new L.Icon.Default()
              break
          }

          return L.marker(latlng, {
            icon: icon,
            opacity: opacity,
            draggable: false,
          });
        }

        function getFeatureStyle(feature) {
          return {
            color: "blue",
            'stroke-width': '0.05'
          };
        }

        function coordsToLatLng(coords) {
          map.panTo(L.latLng(coords))
          return L.latLng(coords)
        }

        function onEachFeature(feature, layer) {
          popupContent =

            '<div class="popup">' +
              '<h3>' + feature.properties.title + '</h3>' +
              '<p>Документів: ' + feature.properties.documents_count + '</p>' +
            '</div>'
          layer.bindPopup(popupContent);

          layer.on({
            mouseover: onFeatureOver,
            mouseout: onFeatureOut,
            click: onFeatureClick,
            dragend: onFeatureDrag,
          });

          function onFeatureClick(e) {
            if (options.clickCallback) {
              options.clickCallback(e.target.feature, e.target)
            }
          }

          function onFeatureDrag(e) {
            if (options.dragCallback) {
              var layer = e.target;
              var ll = layer.getLatLng();

              options.dragCallback(layer, ll)
            }
          }

          function onFeatureOver(e) {
            var layer = e.target;
            //if (layer.setOpacity)
            //  layer.setOpacity(1)

            info.update(layer.feature.properties);
          }

          function onFeatureOut(e) {
            var layer = e.target;
            //if  (layer.setOpacity)
            //  layer.setOpacity(.7)

            info.update();
          }
        }
      }

      function addControl() {
        info = L.control();

        info.onAdd = function (map) {
          this._div = L.DomUtil.create('div', 'info');
          this.update();
          return this._div;
        };

        // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
          if (props)
            this._div.innerHTML = '<h3 class="title">' + props.title + '</h3>'
              + '<p>Документів: ' + props.documents_count + '</p>'
          else
            this._div.innerHTML = 'Наведіть курсор на об’єкт на мапі для відображення деталей'
          };

        info.addTo(map);
      }

      initMap()
      initRouting()
      addControl()

      return {
        map: map,
        popup: popup,
        router: router,
        info: info,
        addGeoJson: addGeoJson,
      }
    }

  });
