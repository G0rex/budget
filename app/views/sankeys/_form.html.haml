:css

  .node rect {
    cursor: move;
    fill-opacity: .9;
    shape-rendering: crispEdges;
  }

  .node text {
    pointer-events: none;
    text-shadow: 0 1px 0 #fff;
  }

  .link {
    fill: none;
    stroke: #000;
    stroke-opacity: .2;
  }

  .link:hover {
    stroke-opacity: .5;
  }

  svg text{
    font-size:12px;
  }

  rect{
    shape-rendering:crispEdges;
  }


= javascript_include_tag "biPartite.js"
= javascript_include_tag "sankey.js"

= form_for @sankey do |f|
  - if @sankey.errors.any?
    #error_explanation
      %h2= "#{pluralize(@sankey.errors.count, "error")} prohibited this sankey from being saved:"
      %ul
        - @sankey.errors.full_messages.each do |msg|
          %li= msg

  %select{:class => "selectpicker", :id => "select_rot"}
    - @budget_files_rot.each do |rot_file|
      %option{:value => rot_file.id}
        = rot_file.title
        = rot_file.taxonomy.owner

  %select{:class => "selectpicker", :id => "select_rov"}
    - @budget_files_rov.each do |rov_file|
      %option{:value => rov_file.id}
        = rov_file.title
        = rov_file.taxonomy.owner

  %p
  %button{:type => "button", :class => "btn btn-primary", :id => "sankey_create"} Створити візуалізацію

  .budget
    #chart1

  %p
  .actions
    = f.submit 'Save'

:javascript
  $(document).on('ready', function() {

    $('#sankey_create').click(function() {

      $('#chart1').html('').css("height", "500px");

      var energy = {"nodes" : [
                      {"name": "Загальний фонд"},
                      {"name": "Спеціальний фонд"},
                    ],
                    "links" : []
                   };

      var file_id = $('#select_rot option:selected').val();
      d3.json("/sankeys/get_rows/" + file_id, function(data) {
        var keys = data["keys"];
        var d = data["rows"]["2015"]["0"];
        for(i in d) {
          if(d[i].kkd_ddd % 1000000 == 0) { // take to graph only main nodes
            //console.log(d[i]);
            var key = keys[d[i].kkd_ddd]["description"];
            energy.nodes.push({ "name": key });
            energy.links.push({ "source": key,
                                "target": d[i].fond,
                                "value": d[i].amount,
                               });
          }
        }
      });

      file_id = $('#select_rov option:selected').val();
      d3.json("/sankeys/get_rows/" + file_id, function(data) {
        var keys = data["keys"];
        var d = data["rows"]["2015"]["0"];
        for(i in d) {
          if(d[i].ktfk % 100 == 0) { // take to graph only main nodes - %10000 should be
            var k = parseInt(d[i].ktfk)
            var key = keys[k]["description"];
            energy.nodes.push({ "name": key });
            energy.links.push({ "source": d[i].fond,
                                "target": key,
                                "value": d[i].amount,
                               });
          }
        }
        create_sankey(energy);
      });

    })

  })

  function create_sankey(energy) {
    // return only the distinct / unique nodes
    energy.nodes = d3.keys(d3.nest()
      .key(function (d) { return d.name; })
      .map(energy.nodes));

    // loop through each link replacing the text with its index from node
    energy.links.forEach(function (d, i) {
      energy.links[i].source = energy.nodes.indexOf(energy.links[i].source);
      energy.links[i].target = energy.nodes.indexOf(energy.links[i].target);
    });

    //now loop through each nodes to make nodes an array of objects
    // rather than an array of strings
    energy.nodes.forEach(function (d, i) {
      energy.nodes[i] = { "name": d };
    });

    var margin = {top: 1, right: 1, bottom: 6, left: 1},
      width = 1200 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

    var formatNumber = d3.format(",.0f"),
      format = function(d) { return formatNumber(d) + " TWh"; },
      color = d3.scale.category20();

    var svg = d3.select("#chart1").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var sankey = d3.sankey()
      .nodeWidth(15)
      .nodePadding(10)
      .size([width, height]);

    var path = sankey.link();

    sankey
      .nodes(energy.nodes)
      .links(energy.links)
      .layout(32);

    var link = svg.append("g").selectAll(".link")
      .data(energy.links)
      .enter().append("path")
        .attr("class", "link")
        .attr("d", path)
        .style("stroke-width", function(d) { return Math.max(1, d.dy); })
        .sort(function(a, b) { return b.dy - a.dy; });

    link.append("title")
      .text(function(d) { return d.source.name + " → " + d.target.name + "\n" + format(d.value); });

    var node = svg.append("g").selectAll(".node")
      .data(energy.nodes)
      .enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .call(d3.behavior.drag()
        .origin(function(d) { return d; })
        .on("dragstart", function() { this.parentNode.appendChild(this); })
        .on("drag", dragmove));

    node.append("rect")
      .attr("height", function(d) { return d.dy; })
      .attr("width", sankey.nodeWidth())
      .style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
      .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
      .append("title")
        .text(function(d) { return d.name + "\n" + format(d.value); });

    node.append("text")
      .attr("x", -6)
      .attr("y", function(d) { return d.dy / 2; })
      .attr("dy", ".35em")
      .attr("text-anchor", "end")
      .attr("transform", null)
      .text(function(d) { return d.name; })
      .filter(function(d) { return d.x < width / 2; })
        .attr("x", 6 + sankey.nodeWidth())
        .attr("text-anchor", "start");

    function dragmove(d) {
      d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
      sankey.relayout();
      link.attr("d", path);
    }
  }

  $(document).on('ready page:change', function() {

    var sales_data=[
    ['AC','CA',116,0],
    ['AC','CA',216,0],
    ['AC','CA',316,0],
    ['AC','CA',416,0],
    ['Lite','AC',16,0],
    ['Small','CA',1278,4],
    ['Medium','CA',27,0],
    ['Plus','CA',58,0],
    ['Grand','CA',1551,15],
    ['Elite','CA',141,0],
    ['Lite','AZ',5453,35],
    ['Small','AZ',683,1],
    ['Medium','AZ',862,0],
    ['Grand','AZ',6228,30],
    ['Lite','AL',15001,449],
    ['Small','AL',527,3],
    ['Medium','AL',836,0],
    ['Plus','AL',28648,1419],
    ['Grand','AL',3,0],
    ['Lite','CO',13,0],
    ['Small','CO',396,0],
    ['Medium','CO',362,0],
    ['Plus','CO',78,10],
    ['Grand','CO',2473,32],
    ['Elite','CO',2063,64],
    ['Medium','DE',203,0],
    ['Grand','DE',686,2],
    ['Elite','DE',826,0],
    ['Lite','KS',1738,110],
    ['Small','KS',12925,13],
    ['Medium','KS',15413,0],
    ['Small','GA',2166,2],
    ['Medium','GA',86,0],
    ['Plus','GA',348,3],
    ['Grand','GA',4244,18],
    ['Elite','GA',1536,1],
    ['Small','IA',351,0],
    ['Grand','IA',405,1],
    ['Small','IL',914,1],
    ['Medium','IL',127,0],
    ['Grand','IL',1470,7],
    ['Elite','IL',516,1],
    ['Lite','IN',43,0],
    ['Small','IN',667,1],
    ['Medium','IN',172,0],
    ['Plus','IN',149,1],
    ['Grand','IN',1380,5],
    ['Elite','IN',791,23],
    ['Small','FL',1,0],
    ['Grand','FL',1,0],
    ['Small','MD',1070,1],
    ['Grand','MD',1171,2],
    ['Elite','MD',33,0],
    ['Plus','TX',1,0],
    ['Small','MS',407,0],
    ['Medium','MS',3,0],
    ['Grand','MS',457,2],
    ['Elite','MS',20,0],
    ['Small','NC',557,0],
    ['Medium','NC',167,0],
    ['Plus','NC',95,1],
    ['Grand','NC',1090,5],
    ['Elite','NC',676,6],
    ['Lite','NM',1195,99],
    ['Small','NM',350,3],
    ['Medium','NM',212,0],
    ['Grand','NM',1509,8],
    ['Lite','NV',3899,389],
    ['Small','NV',147,0],
    ['Medium','NV',455,0],
    ['Plus','NV',1,1],
    ['Grand','NV',4100,16],
    ['Lite','OH',12,0],
    ['Small','OH',634,2],
    ['Medium','OH',749,0],
    ['Plus','OH',119,1],
    ['Grand','OH',3705,19],
    ['Elite','OH',3456,25],
    ['Small','PA',828,2],
    ['Medium','PA',288,0],
    ['Plus','PA',141,0],
    ['Grand','PA',2625,7],
    ['Elite','PA',1920,10],
    ['Small','SC',1146,2],
    ['Medium','SC',212,0],
    ['Plus','SC',223,4],
    ['Grand','SC',1803,6],
    ['Elite','SC',761,8],
    ['Small','TN',527,0],
    ['Medium','TN',90,0],
    ['Grand','TN',930,4],
    ['Elite','TN',395,1],
    ['Lite','ME',7232,58],
    ['Small','ME',1272,0],
    ['Medium','ME',1896,0],
    ['Plus','ME',1,0],
    ['Grand','ME',10782,33],
    ['Elite','ME',1911,3],
    ['Small','VA',495,0],
    ['Medium','VA',32,0],
    ['Plus','VA',7,0],
    ['Grand','VA',1557,12],
    ['Elite','VA',24,0],
    ['Small','WA',460,1],
    ['Plus','WA',88,3],
    ['Grand','WA',956,3],
    ['Small','WV',232,0],
    ['Medium','WV',71,0],
    ['Grand','WV',575,2],
    ['Elite','WV',368,3]
    ];

    // var width = 1100, height = 610, margin ={b:0, t:40, l:170, r:50};
    //
    //var svg = d3.select("#chart2")
    //  .append("svg").attr('width',width).attr('height',(height+margin.b+margin.t))
    //  .append("g").attr("transform","translate("+ margin.l+","+margin.t+")");
    //
    //var data = [
    //  {data:bP.partData(sales_data,2), id:'SalesAttempts', header:["Channel","State", "Sales Attempts"]},
    //  {data:bP.partData(sales_data,3), id:'Sales', header:["Channel","State", "Sales"]},
    //];
    //
    //bP.draw(data, svg);

  })
